<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>An Hoang</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on An Hoang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 23 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About me</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>👋 I’m exposing software. Hello. Welcome in!
I’m An. I was born 2001 in Vietnam. I make software for a living since 2016, started by making Minecraft servers, followed by web development.
Contact Email me at xuanan2001@pm.me. I&amp;rsquo;m on Discord as an7. Here&amp;rsquo;s my Facebook.</description>
      <content>&lt;h2 id=&#34;-im-exposing-software&#34;&gt;👋 I’m exposing software.&lt;/h2&gt;
&lt;p&gt;Hello. Welcome in!&lt;/p&gt;
&lt;p&gt;I’m An. I was born 2001 in Vietnam. I make software for a living since 2016,
started by making Minecraft servers, followed by web development.&lt;/p&gt;
&lt;h2 id=&#34;contact&#34;&gt;Contact&lt;/h2&gt;
&lt;p&gt;Email me at &lt;a href=&#34;mailto:xuanan2001@pm.me&#34;&gt;xuanan2001@pm.me&lt;/a&gt;. I&amp;rsquo;m on Discord as
&lt;em&gt;an7&lt;/em&gt;. Here&amp;rsquo;s my &lt;a href=&#34;https://facebook.com/an.xuanhoang&#34;&gt;Facebook&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Showcase</title>
      <link>http://localhost:1313/showcase/</link>
      <pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/showcase/</guid>
      <description> Bite: Don&amp;rsquo;t know what to eat? Bite can help. draft: feat: next-auth/expo Casual GitHub profile. </description>
      <content>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bite.hxann.com&#34;&gt;Bite: Don&amp;rsquo;t know what to eat? Bite can help.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nextauthjs/next-auth/pull/5240&#34;&gt;draft: feat: next-auth/expo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/intagaming&#34;&gt;Casual GitHub profile.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>Thoughts about elixir</title>
      <link>http://localhost:1313/posts/thoughts-about-elixir/</link>
      <pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/thoughts-about-elixir/</guid>
      <description>I understand that Every code is legacy, given most projects, even Java codebase, use some kind of package manager. But hear me out about Elixir.
When I used Elixir for my side project, it was great and I indeed was flying. But I was working on another Elixir project at work. Here I encountered:
Ash Framework. You think Spring Boot Framework or .NET Framework is a giant piece of software? You haven&amp;rsquo;t seen Ash Framework.</description>
      <content>&lt;p&gt;I understand that &lt;em&gt;Every code is legacy&lt;/em&gt;, given most projects, even Java
codebase, use some kind of package manager. But hear me out about Elixir.&lt;/p&gt;
&lt;p&gt;When I used Elixir for my side project, it was great and I indeed was flying.
But I was working on another Elixir project at work. Here I encountered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ash Framework. You think Spring Boot Framework or .NET Framework is a giant
piece of software? You haven&amp;rsquo;t seen Ash Framework. You will have a chance to
basically turn your Elixir code into an Ash application. This ain&amp;rsquo;t Elixir
anymore, not the kind you can do work after you read the Elixir language book.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You don&amp;rsquo;t use Ecto, you use Ash Resources. You don&amp;rsquo;t use &lt;code&gt;Ecto.Changeset&lt;/code&gt;,
you will use &lt;code&gt;Ash.Changeset&lt;/code&gt;. Oh you want to query? Better use &lt;code&gt;Ash.Query&lt;/code&gt;.
And how do you commit those changesets, &lt;code&gt;MyApp.Repo.create()&lt;/code&gt; or
&lt;code&gt;MyApp.create()&lt;/code&gt; or &lt;code&gt;MyApp.Animal.create()&lt;/code&gt;? This is &lt;strong&gt;webdev&lt;/strong&gt; level of
abstraction.&lt;/li&gt;
&lt;li&gt;You want documentation? Here, check this out. Go to &lt;a href=&#34;https://ash-hq.org/docs/guides/ash/latest/tutorials/get-started&#34;&gt;Ash Framework
website&lt;/a&gt; and try to search. You need to wait 30 seconds. So you use
HexDocs now.&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s play a game. Let&amp;rsquo;s try to learn how to create &lt;a href=&#34;https://hexdocs.pm/ash/Ash.Changeset.html&#34;&gt;Ash Changeset&lt;/a&gt;. This
docs page says nothing. There isn&amp;rsquo;t even a link to learn about it. Looking
at the list of functions in that module, I just want to give up. Learn Ecto
Changeset instead? I&amp;rsquo;ve already given up on that. I want to do work, not
crafting changesets and commit them.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You don&amp;rsquo;t write SQL or use an ORM. You use Ecto and its changeset. The term
&amp;ldquo;Changeset&amp;rdquo; seems like a good idea for a mutation until you realize that to do
what is equivalent to the &lt;code&gt;WHERE&lt;/code&gt; clause of SQL, you don&amp;rsquo;t know how.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ecto has made the decision to clearly separate data from action, whereas in
an OO language like Ruby they’re tied together.&lt;/p&gt;
&lt;p&gt;Consequently, you may need an extra line or two to do certain things via
Ecto that you’d do from ActiveRecord. I don’t really see this as much of a
problem, and it helps make it wildly clearer when and how database access
actually happens.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://elixirforum.com/t/updating-a-field-using-ecto-one-liner/11714/3&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;ldquo;A line or two&amp;rdquo; means you do a fucking query to update a line. Nice!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;credo&lt;/code&gt;. Oh Clean Code. You don&amp;rsquo;t write a long project, you split them up and
have to name every single piece. You don&amp;rsquo;t write &lt;code&gt;// TODO:&lt;/code&gt; or it won&amp;rsquo;t let
your code pass CI. Idiomatic Elixir.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And what do I like about Elixir?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|&amp;gt; dbg()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>YouTube&#39;s &#34;Add to playlist&#34;</title>
      <link>http://localhost:1313/posts/youtubes-add-to-playlist/</link>
      <pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/youtubes-add-to-playlist/</guid>
      <description>On YouTube, when clicking Save (on YouTube) or Add to playlist (on YouTube Music), they auto selects which playlist to add video/song to based on the previously selected playlist, and they won&amp;rsquo;t show the title of the video/song being added to the playlist.
Just added a song 5 minutes ago. Now I&amp;rsquo;m switching genre and ended up adding a fucking hip-hop song into the chill playlist, costing me another 3 clicks (instead of 2) and 5 seconds.</description>
      <content>&lt;p&gt;On YouTube, when clicking &lt;em&gt;Save&lt;/em&gt; (on YouTube) or &lt;em&gt;Add to playlist&lt;/em&gt; (on YouTube
Music), &lt;strong&gt;they auto selects which playlist to add video/song to based on the
previously selected playlist, and they won&amp;rsquo;t show the title of the video/song
being added to the playlist.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just added a song 5 minutes ago. Now I&amp;rsquo;m switching genre and ended up adding a
fucking hip-hop song into the chill playlist, costing me another 3 clicks
(instead of 2) and 5 seconds. Want a solution? Add a fucking &lt;em&gt;remember&lt;/em&gt;
checkbox. How many years did it took?&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>&#34;Tell me about the basics of REST API.&#34;</title>
      <link>http://localhost:1313/posts/rest-api-interview/</link>
      <pubDate>Sat, 09 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/rest-api-interview/</guid>
      <description>The interview The question was from a fullstack interview. The interviewer asked:
Tell me about the basics of REST API.
Let&amp;rsquo;s be real for a moment. Here was the outline of what happened next in the interview:
I tried to explain in 3-4 sentences about how most of today&amp;rsquo;s REST APIs are not actually REST APIs based on the definition of Roy Fielding. I state HATEOAS as the reason. The interviewer said I was not answering the question about the basics of REST APIs.</description>
      <content>&lt;h2 id=&#34;the-interview&#34;&gt;The interview&lt;/h2&gt;
&lt;p&gt;The question was from a fullstack interview. The interviewer asked:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tell me about the basics of REST API.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s be real for a moment. Here was the outline of what happened next in the
interview:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I tried to explain in 3-4 sentences about how most of today&amp;rsquo;s REST APIs are
not actually REST APIs based on &lt;a href=&#34;https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34;&gt;the definition of Roy Fielding&lt;/a&gt;. I state
&lt;a href=&#34;https://htmx.org/essays/hateoas/&#34;&gt;HATEOAS&lt;/a&gt; as the reason.&lt;/li&gt;
&lt;li&gt;The interviewer said I was not answering the question about the basics of
REST APIs.&lt;/li&gt;
&lt;li&gt;I tried to gave him what I thought he wanted, roughly: REST API is
REpresentational State Transfer, which is the guideline for an API to
provide interactions with and queries for Resources.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then he solved the question himself, stating the followings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REST APIs have Status Code, like 200s, 400s, 500s.&lt;/li&gt;
&lt;li&gt;They have request body, response body, the type of the request/response body
i.e. JSON or image.&lt;/li&gt;
&lt;li&gt;They have actions like &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;&amp;hellip;&lt;/li&gt;
&lt;li&gt;Probably some more, I don&amp;rsquo;t totally remember.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regarding my &amp;ldquo;today&amp;rsquo;s REST APIs are not actually REST APIs&amp;rdquo; statement, he
stated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REST is just a &lt;strong&gt;guideline&lt;/strong&gt;. People are using REST APIs just fine. Whether
they implement REST fully or not doesn&amp;rsquo;t matter.&lt;/li&gt;
&lt;li&gt;(About HATEOAS) It isn&amp;rsquo;t necessary to put endpoints into the response, people
solve that differently, like using Swagger to discover the API&amp;rsquo;s endpoints.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s what happened. Now onto my thoughts after a few weeks.&lt;/p&gt;
&lt;h2 id=&#34;was-the-interviewer-right&#34;&gt;Was the interviewer right?&lt;/h2&gt;
&lt;p&gt;Just to state the obvious: I am fully aware that I am no way a senior, and up to
now I wasn&amp;rsquo;t saying that I was right or he was wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I don&amp;rsquo;t think &amp;ldquo;the basics of REST API&amp;rdquo; includes an overview of the HTTP
specification.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two parts here: REST and API. Here is &lt;a href=&#34;https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34;&gt;REST&lt;/a&gt;. API is, well, existed
before REST happens. It is the Application Programming Interface, which is fancy
for &amp;ldquo;a way to interact with something&amp;rdquo;. None of which mentions anything about
response body or status code.&lt;/p&gt;
&lt;p&gt;If the interviewer wanted to ask about how the HTTP server and the HTTP client
communicates with each other, then the question is about &lt;strong&gt;APIs that use HTTP
as the protocol&lt;/strong&gt;, not REST or API or REST API. Quoting &lt;a href=&#34;https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34;&gt;the original Roy
Fielding dissertation&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Representational State Transfer (REST) style &lt;strong&gt;is an abstraction&lt;/strong&gt; of the
architectural elements within a distributed hypermedia system. REST &lt;strong&gt;ignores
the details of component implementation and protocol syntax&lt;/strong&gt; in order to
focus on the roles of components, the constraints upon their interaction with
other components, and their interpretation of significant data elements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Judging from the beginning of the quote, it could be regarded as the definition
of REST. So there is that.&lt;/p&gt;
&lt;h2 id=&#34;he-asked-the-wrong-question-and-thats-fine&#34;&gt;He asked the wrong question, and that&amp;rsquo;s fine*&lt;/h2&gt;
&lt;p&gt;I get it. He wanted to know how much I knew about &amp;ldquo;APIs&amp;rdquo; since the interview was
for the fullstack position. The question was just too ambiguous.&lt;/p&gt;
&lt;p&gt;I already know what you think: &lt;strong&gt;You have to say what the interviewer wants you
to say.&lt;/strong&gt; And at the heat of the moment I was aware of that, but maybe I cared
too much and made an essay about REST. That&amp;rsquo;s on me.&lt;/p&gt;
&lt;p&gt;With that said: &lt;strong&gt;I still stand by my opinion about the term &amp;ldquo;REST API&amp;rdquo;.&lt;/strong&gt;
Here&amp;rsquo;s another quote from Roy Fielding himself about the misconception:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am getting frustrated by the number of people calling any HTTP-based
interface a REST API. Today’s example is the SocialSite REST API. That is RPC.
It screams RPC. There is so much coupling on display that it should be given
an X rating.&lt;/p&gt;
&lt;p&gt;What needs to be done to make the REST architectural style clear on the notion
that hypertext is a constraint? In other words, if the engine of application
state (and hence the API) is not being driven by hypertext, then it cannot be
RESTful and cannot be a REST API. Period. Is there some broken manual
somewhere that needs to be fixed?&lt;/p&gt;
&lt;p&gt;–Roy Fielding, Creator of the term REST&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven&#34;&gt;REST APIs must be hypertext-driven&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The article I found the quote on was &lt;a href=&#34;https://htmx.org/essays/how-did-rest-come-to-mean-the-opposite-of-rest/&#34;&gt;&amp;ldquo;How Did REST Come To Mean The Opposite of
REST?&amp;rdquo; by Carson Gross&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;optional-the-outcome-of-the-interview&#34;&gt;(Optional) The outcome of the interview&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s what I think of the interview: The interviewer was not very nice and was
frustrated about my answer&lt;strong&gt;s&lt;/strong&gt; (notice the plural in &amp;ldquo;answers&amp;rdquo;). He really gave
me a &lt;strong&gt;lecture&lt;/strong&gt; on &amp;ldquo;REST API&amp;rdquo;. Depending on my view on the topic, you may
choose to discount my opinion but I think my answers to the interviewer&amp;rsquo;s
questions were fair and knowledgable. &lt;strong&gt;He was the engineer on the team. After
the interview, I don&amp;rsquo;t want to work with him not because of the questions but
because of the attitude.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The company&amp;rsquo;s name? FPT Software. No bashing on the company itself though - I
just happened to have this experience, and I will tell the experience. Also I
went to FPT University. Just saying.&lt;/p&gt;
&lt;p&gt;Ultimately I turned down the deal because the salary was lower than my current
job.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Opinions</title>
      <link>http://localhost:1313/posts/opinions/</link>
      <pubDate>Sat, 03 Jun 2023 09:38:00 +0700</pubDate>
      
      <guid>http://localhost:1313/posts/opinions/</guid>
      <description>You know, there are opinions. And you will hear lots of it. When you face an opposing opinion on something you have a strong opinion about, oh boy…
A person’s opinion tells you a lot about them. And if you observe them over a period of time, you would definitely see a pattern. Opinions go together. Do your opinions go together? I think it is, and there is a pattern.</description>
      <content>&lt;p&gt;You know, there are opinions. And you will hear lots of it. When you face an
opposing opinion on something you have a strong opinion about, oh boy…&lt;/p&gt;
&lt;p&gt;A person’s opinion tells you a lot about them. And if you observe them over a
period of time, you would definitely see a pattern. Opinions go together. Do
your opinions go together? I think it is, and there is a pattern.&lt;/p&gt;
&lt;p&gt;For example, I do consume a lot of English content so I have very strict
standard on English’s pronunciation, about the cultural world in English, about
source of information, about how English-lyric songs should lyrically be, how
those songs should sound, etc. They are in the same group of opinion, and you
can’t change one without living another life.&lt;/p&gt;
&lt;p&gt;Now expand that category and you could deduct that person’s entire opinion
range. But be careful; you don’t wanna be called out making up stereotypes. Just
be moderate about your assumptions.&lt;/p&gt;
&lt;p&gt;Example: If you think that someone who likes badly pronunciated English songs is
inferior somehow, then it’s probably right. They like bad English songs, so most
likely they are bad at English. They probably have limited ability to search for
information on the net. They will have a hard time dealing with people from
another country. They will not obtain as much knowledge in their field as
someone who knows the universal language. They will have narrower point of view
in life because they aren’t exposed to another different world. They will
probably judge the people from that another world. They like a specific kind of
music that pronunciation-wise sounds awful but insist that the music makes up
for it. Not that this person is not successful, but if you just think about it a
little bit more, you basically just deducted their life out of it: their
thinking, their life viewpoints, their lifestyle, their future interactions, …&lt;/p&gt;
&lt;p&gt;Now you probably have faced this situation in your life, which is when you have
to decide if you want to continue dealing with this person or not. Your parents
probably taught you that whoever you play with will make you (or just about any
paraphrase of it). Do you want to become that person? And I’m not saying that
bad English will make bad people, I’m talking about their lifestyle and
viewpoints and behaviors and such. Use whatever language they like, but if they
aren’t the American or Korean or Ukrainian or Russian or whatever people and
they judge them? How else can they learn to not judge other people, or judge
&lt;strong&gt;sensibly&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Taking any amount of salt to take my point, but just let it sit with you the
next time you think about your friend Bob. Best friend I suppose, but you
probably don’t want to be dealing with Bob in the using-cocaine side of thing.
That might be a bit of a stretch but just dial it down a bit.&lt;/p&gt;
&lt;p&gt;Sometimes stereotypes will go a long way, and you have probably done it before.
It’s human nature for human to choose the best choice and I’m pretty sure that
is the fact.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;About that awful English song, it&amp;rsquo;s a male Vietnamese singer that&amp;rsquo;s like the
only Vietnamese singer that touches 1M likes on a Vietnamese Facebook post, and
of course, his English is fine had he not made 2 English songs. What am I gonna
do? Praise the English song and let people admire the third song just like his
second try? My friends - plurally, yes - responsed to my criticism that the
song was fine, even sounded good, and said that my criticism was invalid
because I was being supreme. Then one guy starts analogously comparing my
criticism with something about my love between me and my girlfriend or
something, with anger and full of opinion enthusiasm. I didn&amp;rsquo;t let him finish
and just quits the Discord server, and never deal with him again. Talk about
what an awful English song can do to a Vietnamese ;)&lt;/em&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Code editors right now are all mid</title>
      <link>http://localhost:1313/posts/code-editors-right-now-are-all-mid/</link>
      <pubDate>Sun, 12 Mar 2023 16:15:00 +0700</pubDate>
      
      <guid>http://localhost:1313/posts/code-editors-right-now-are-all-mid/</guid>
      <description>Just spent my weekend improving my editor situation. Let&amp;rsquo;s talk about what happened.
Last updated time: May 31th, 2023.
Let&amp;rsquo;s set the stage: I started with VSCode, learned Vim motions and used it in VSCode. Everything is fine. Started seeking workflow optimizations. Landing on Neovim. I&amp;rsquo;m optimizing for my work which is comprised of Astro, TailwindCSS and TypeScript. Alright, let&amp;rsquo;s go.
Neovim Neovim is great. Production-ready editor.
nvim-cmp is having a hard time with tailwindcss-language-server.</description>
      <content>&lt;p&gt;Just spent my weekend improving my editor situation. Let&amp;rsquo;s talk about what
happened.&lt;/p&gt;
&lt;p&gt;Last updated time: May 31th, 2023.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s set the stage: I started with VSCode, learned Vim motions and used it in
VSCode. Everything is fine. Started seeking workflow optimizations. Landing on
Neovim. I&amp;rsquo;m optimizing for my work which is comprised of Astro, TailwindCSS and
TypeScript. Alright, let&amp;rsquo;s go.&lt;/p&gt;
&lt;h2 id=&#34;neovim&#34;&gt;Neovim&lt;/h2&gt;
&lt;p&gt;Neovim is great. Production-ready editor.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/issues/1009&#34;&gt;&lt;code&gt;nvim-cmp&lt;/code&gt; is having a hard time with
&lt;code&gt;tailwindcss-language-server&lt;/code&gt;.&lt;/a&gt;
Typing classes will have Neovim sucks big time. A dealbreaker compares to
VSCode.&lt;/del&gt; This had been fixed by the famous @folke.&lt;/p&gt;
&lt;p&gt;Using Neovim everyday for work. It serves me well. I can hack around and write
code, but I feel I can be faster with more tricks. For now I&amp;rsquo;m sticking with
Neovim and see if I can &lt;em&gt;git gud&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The below is the original post.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Maybe my Macbook Pro 15&amp;quot; 2015 (8 years old machine) can&amp;rsquo;t handle modern LSPs.
Let&amp;rsquo;s try remote development.&lt;/p&gt;
&lt;h2 id=&#34;remote-vm-as-development-environment&#34;&gt;Remote VM as development environment&lt;/h2&gt;
&lt;p&gt;I got a $10 Linode Linux VM. Same Neovim setup. Nothing changed, it sucks big
time.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t want to go back to VSCode yet. Let&amp;rsquo;s try Helix.&lt;/p&gt;
&lt;h2 id=&#34;helix&#34;&gt;Helix&lt;/h2&gt;
&lt;p&gt;Helix is great. Got through &lt;code&gt;helix --tutor&lt;/code&gt;, pretty mind-blown from a Vim user&amp;rsquo;s
perspective.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/helix-editor/helix/pull/2507&#34;&gt;Helix doesn&amp;rsquo;t yet support multiple LSPs at the same
time.&lt;/a&gt; Can&amp;rsquo;t do Astro and
TailwindCSS at the same time. Dealbreaker.&lt;/p&gt;
&lt;p&gt;Back to VSCode it is. Maybe remote development is the future? It might help me
get through the days that I forget my laptop to work. Let&amp;rsquo;s try Gitpod.&lt;/p&gt;
&lt;h2 id=&#34;gitpod&#34;&gt;Gitpod&lt;/h2&gt;
&lt;p&gt;So, Gitpod.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No first-class Vim IDE. That&amp;rsquo;s fine, Neovim is mid anyway.&lt;/li&gt;
&lt;li&gt;I need a separate dotfiles repo for Gitpod because my dotfiles are a bare repo
and &lt;code&gt;config checkout&lt;/code&gt; doesn&amp;rsquo;t work on Gitpod. It might, I don&amp;rsquo;t care enough.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vscode-neovim&lt;/code&gt; extension. I need &lt;code&gt;nvim&lt;/code&gt; installed. Setting up &lt;code&gt;nvim&lt;/code&gt; on
Gitpod takes some research. Turns out &lt;code&gt;vscode-neovim&lt;/code&gt; takes some unique
brain-power to use. I don&amp;rsquo;t care enough.&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s use normal Vim extension&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point I started thinking about the fact that I might not get anything
more than my local VSCode. Let&amp;rsquo;s &amp;ldquo;try&amp;rdquo; VSCode.&lt;/p&gt;
&lt;h2 id=&#34;vscode&#34;&gt;VSCode&lt;/h2&gt;
&lt;p&gt;VSCode is my home turf for a long time. It doesn&amp;rsquo;t error out and is pretty good.&lt;/p&gt;
&lt;p&gt;Coming from a full-keyboard Neovim workflow, VSCode sucks hard. Just imagine
navigating the sidebar with keyboards. It is not designed for keyboard use. You
can convince me but I&amp;rsquo;m pretty sure VSCode can&amp;rsquo;t ever match Neovim no matter how
hard it tries.&lt;/p&gt;
&lt;p&gt;Can&amp;rsquo;t make VSCode acts like my Neovim. Dealbreaker. Let&amp;rsquo;s go back to Neovim. I
decided to try LunarVim.&lt;/p&gt;
&lt;h2 id=&#34;lunarvim&#34;&gt;LunarVim&lt;/h2&gt;
&lt;p&gt;Tried it on my project.&lt;/p&gt;
&lt;p&gt;I think doing a minimal DIY config yourself is 200% better. You make the config
from scratch, you know why the editor looks and acts that way. If you need to
substitute something for another thing, you can do that.&lt;/p&gt;
&lt;p&gt;LunarVim takes some unique brain-power to config. I don&amp;rsquo;t care enough. Let&amp;rsquo;s go
back to Neovim.&lt;/p&gt;
&lt;h2 id=&#34;neovim-again&#34;&gt;Neovim, again.&lt;/h2&gt;
&lt;p&gt;Yeah. It&amp;rsquo;s Neovim for me for now.&lt;/p&gt;
&lt;p&gt;I tired &lt;code&gt;coq_nvim&lt;/code&gt;. It sucks. It looks bland. I can&amp;rsquo;t feel the fastness of it
compares to &lt;code&gt;nvim-cmp&lt;/code&gt;. &lt;code&gt;tailwind-language-server&lt;/code&gt; still chuckles.&lt;/p&gt;
&lt;p&gt;If it&amp;rsquo;s not for the Tailwind thing, Neovim is great.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Code editors right now are all mid.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, the title. It&amp;rsquo;s probably right. I provided my evidence, and if the editor is
not making me conveniently do my job, it&amp;rsquo;s mid, right?&lt;/p&gt;
&lt;p&gt;The great thing is that I don&amp;rsquo;t know how long until my Tailwind situation can be
resolved. Isn&amp;rsquo;t it great that VSCode is flawlessly spitting Tailwind
autocompletion while Neovim autocompletion scene is doing a civil war?&lt;/p&gt;
&lt;p&gt;As a code editor user, I&amp;rsquo;m disappointed. As a developer, I hope to someday have
the time and knowledge and courage to contribute to my tools. What am I trying
to say?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Code editors right now are all mid.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    </item>
    
    <item>
      <title>Religious software development arguments</title>
      <link>http://localhost:1313/posts/religious-software-development-arguments/</link>
      <pubDate>Tue, 24 Jan 2023 05:06:00 +0700</pubDate>
      
      <guid>http://localhost:1313/posts/religious-software-development-arguments/</guid>
      <description>Software development arguments are becoming blindly religious. An argument on YouTube will be showered with acceptance and comments like:
I agreed. This X guy is so stupid.
The argument itself doesn&amp;rsquo;t even specify the context before criticizing the original idea. What good does this have on the newbies?
As an original idea appreciator (which means I selectively agree with the original idea), I don&amp;rsquo;t even know how to react to the counter-argument because the counter-argument itself isn&amp;rsquo;t even wrong.</description>
      <content>&lt;p&gt;Software development arguments are becoming blindly religious. An argument on YouTube will be showered with acceptance and comments like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I agreed. This X guy is so stupid.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The argument itself doesn&amp;rsquo;t even specify the &lt;strong&gt;context&lt;/strong&gt; before criticizing the original idea. What good does this have on the newbies?&lt;/p&gt;


    
    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/4fp1B8YFzO4?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;p&gt;As an original idea appreciator (which means I &lt;strong&gt;selectively&lt;/strong&gt; agree with the original idea), I don&amp;rsquo;t even know how to react to the counter-argument because &lt;strong&gt;the counter-argument itself isn&amp;rsquo;t even wrong&lt;/strong&gt;. It just misses some points by not specifying all the parameters and &lt;strong&gt;it doesn&amp;rsquo;t acknowledge so.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t have words to go &amp;lsquo;round with these arguments. It&amp;rsquo;s like TikTok. You just oppose and suddenly everyone agrees, and you like it very much. If software development keeps going like this, I don&amp;rsquo;t think I&amp;rsquo;ll consume so much of the opposing ideas anymore.&lt;/p&gt;
&lt;p&gt;It obviously won&amp;rsquo;t go that far. My point is, such arguments will receive a &lt;strong&gt;big L&lt;/strong&gt; rather than being recognized.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>What is the architecture of the T3 application?</title>
      <link>http://localhost:1313/posts/t3-architecture/</link>
      <pubDate>Sun, 25 Sep 2022 03:47:00 +0700</pubDate>
      
      <guid>http://localhost:1313/posts/t3-architecture/</guid>
      <description>MVC and its derived patterns Model-View-Controller (MVC) is a user interface architecture pattern.
It describes how data (i.e. Model) is applied into the View, which is via the Controller. The data might come from some database, and the Controller will go and fetch them.
Model-View-ViewModel (MVVM) is based on MVC, concerning with the separation between the GUI (View) and the logic (ViewModel &amp;amp; Model). The point is making the View to not contain any logic at all, moving logic somewhere else.</description>
      <content>&lt;h2 id=&#34;mvc-and-its-derived-patterns&#34;&gt;MVC and its derived patterns&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/MVC&#34;&gt;Model-View-Controller (MVC) is a user interface architecture
pattern.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;mvc-diagram&#34; src=&#34;http://localhost:1313/images/uploads/mvc-diagram_ygwmqy.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;It describes how data (i.e. Model) is applied into the View, which is via the
Controller. The data might come from some database, and the Controller will go
and fetch them.&lt;/p&gt;
&lt;p&gt;Model-View-ViewModel (MVVM) is based on MVC, concerning with the separation
between the GUI (View) and the logic (ViewModel &amp;amp; Model). The point is making
the View to not contain any logic at all, moving logic somewhere else.&lt;/p&gt;
&lt;p&gt;Because MVC, MVVM and similar architectures are defining the architecture of a
whole application, when considering the architecture of the T3 stack, we must
consider the architecture of the whole T3 stack. Expect there is a problem: the
T3 stack contains multiple applications, each with different architecture.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note about what a T3 stack is: &lt;a href=&#34;https://init.tips/&#34;&gt;https://init.tips/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-t3-application-breakdown&#34;&gt;The T3 application breakdown&lt;/h2&gt;
&lt;h3 id=&#34;react&#34;&gt;React&lt;/h3&gt;
&lt;p&gt;The React application has no default architecture, i.e. the way which the
application must be architected. A React app can be architected based on how the
data moves within the app. The T3 stack doesn&amp;rsquo;t impose any architecture on the
React app.&lt;/p&gt;
&lt;h3 id=&#34;nextjs-backend&#34;&gt;Next.js (backend)&lt;/h3&gt;
&lt;p&gt;The Next.js application, which uses React as the frontend, can do several &lt;em&gt;data
fetching patterns&lt;/em&gt; depending on how Next.js is used.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client-side Rendering (CSR) is the pattern where data is fetched on the
client-side, i.e. the user&amp;rsquo;s browser.&lt;/li&gt;
&lt;li&gt;Server-side Rendering (SSR): data is fetched on the server, then sent to
user&amp;rsquo;s browser.&lt;/li&gt;
&lt;li&gt;Static Site Generation (SSG) and its variant, Incremental Static Regeneration
(ISR): data is fetch once, then no more. From the second requests on, the page
has the same data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The aboves are just patterns to &lt;em&gt;fetch data for the Next.js frontend&lt;/em&gt;. There are
also the Next.js backend: a bunch of functions waiting to be called. Not much of
an architecture on the Next.js backend itself: how the Next.js backend is
organized is not regulated and varies between apps. However the Next.js frontend
can use one of the above patterns to fetch data from the Next.js backend. This
is just the &lt;strong&gt;Client-Server architecture&lt;/strong&gt;. In the T3 stack, tRPC is powered by
the Next.js backend, so nothing special about tRPC.&lt;/p&gt;
&lt;p&gt;If we decide to throw in a React Native frontend for mobile in the T3 stack, we
are just replacing the React in Next.js with React Native. React Native can call
the Next.js backend just like the React app, a.k.a. Client-side rendering. Here,
the link between RN and the Next.js backend is just a Client-Server
architecture.&lt;/p&gt;
&lt;h2 id=&#34;mvc-in-t3-stack&#34;&gt;MVC in T3 stack?&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s walk back and try to fit MVC and its derived patterns somewhere in the T3
stack.&lt;/p&gt;
&lt;p&gt;If we look into React, it is a thing to make UIs. It can be a full application
by itself, but it&amp;rsquo;s not how typical React applications work. The React
application (typically) needs a backend. So React is the View.&lt;/p&gt;
&lt;p&gt;One small note about MVVM: Because the distance between the React and the server
can be huge compare to a WPF application, as well as the fact that the Model
part in the T3 stack is stateless (meaning there is no state on the backend that
can be subscribed to; the data is fetched on demand), MVVM is usually not common
on the web.&lt;/p&gt;
&lt;p&gt;Model is the data. Data is handled by the Next.js backend. How does the data
from the Next.js backend move to the React app? In MVC, it must be facilitated
by the Controller. There are a few options here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If Next.js&amp;rsquo; SSR or SSG is used, then Next.js is the thing that provides data
to the React app. Hence Next.js is the Controller.&lt;/li&gt;
&lt;li&gt;If no SSR or SSG is used, the Controller is the React app. The React app has
to actually go and fetch the data it needs by itself.&lt;/li&gt;
&lt;li&gt;Even if SSR or SSG is used, those are just used to &lt;em&gt;fetch&lt;/em&gt; data &lt;strong&gt;initially&lt;/strong&gt;.
If we need to fetch/update data while the app is running, React must go and do
that itself by calling the Next.js backend. React is now the Controller.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, it is not clear what the M, V and C are. Though we can still make the case
that the T3 application is an MVC application. I would argue that MVC is so
generic it can be applied to many applications that don&amp;rsquo;t even have MVC written
in its portfolio. MVC is just a way to think about UI and logic segregations.&lt;/p&gt;
&lt;h2 id=&#34;serverless&#34;&gt;Serverless?&lt;/h2&gt;
&lt;p&gt;What about Serverless architecture?&lt;/p&gt;
&lt;p&gt;Serverless refers to the fact that the server that hosts the Next.js backend
functions are handled by a third-party service responsible for scaling the
infrastructure. Next.js backend functions are now called Lambdas, which are code
that run on a server somewhere on-demand. The first time the Lambda gets called,
it needs to be deployed on a server somewhere, which takes some relatively short
time. This is called a Cold Start. Following requests are just as fast as a
normal API request. If the Lambda doesn&amp;rsquo;t get called for awhile, the server
brings the code down.&lt;/p&gt;
&lt;p&gt;Because of the fact that there is no one fixed server in the Serverless
architecture, the Lambdas must be &amp;ldquo;stateless&amp;rdquo;: there must be no state retained
from the previous requests. Though, state can be stored outside of Lambdas, e.g.
in an external database.&lt;/p&gt;
&lt;p&gt;If the Next.js backend is deployed on a Serverless platform like Vercel or
Netlify, it exhibits a Serverless architecture. If the Next.js backend is
deployed on a normal fixed server, it is otherwise not Serverless, which is
advised against anyway.&lt;/p&gt;
&lt;h2 id=&#34;the-t3-stack-architecture&#34;&gt;The T3 stack architecture&lt;/h2&gt;
&lt;p&gt;That said, what is the architecture of the T3 stack?&lt;/p&gt;
&lt;p&gt;As you can see, there are options to choose from, and we can even choose
multiple options at once, so as everything else in life, &amp;ldquo;it depends&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Here is a diagram to sum it up:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;t3-architecture&#34; src=&#34;http://localhost:1313/images/uploads/riv7jhhgy.png&#34;&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Distributed Realtime Server Architecture</title>
      <link>http://localhost:1313/posts/distributed-realtime-server/</link>
      <pubDate>Fri, 08 Jul 2022 03:33:00 +0700</pubDate>
      
      <guid>http://localhost:1313/posts/distributed-realtime-server/</guid>
      <description>Here you go, free TL;DR. Interested?
Storytime The other day, I decided to learn about WebSocket/realtime applications. I had known about them for the longest time but had not written a single line of WebSocket code. I kind of knew what it is about, something about chat applications, but didn&amp;rsquo;t know how it works.
I heard about Ably from Theo. Theo is the CTO of Ping. He talks about web development and software development in general, you can find him on Twitch streaming or watch the cuts on YouTube.</description>
      <content>&lt;p&gt;Here you go, free TL;DR. Interested?&lt;/p&gt;
&lt;h2 id=&#34;storytime&#34;&gt;Storytime&lt;/h2&gt;
&lt;p&gt;The other day, I decided to learn about WebSocket/realtime applications. I had
known about them for the longest time but had not written a single line of
WebSocket code. I kind of knew what it is about, something about chat
applications, but didn&amp;rsquo;t know how it works.&lt;/p&gt;
&lt;p&gt;I heard about Ably from &lt;a href=&#34;https://t3.gg/&#34;&gt;Theo&lt;/a&gt;. Theo is the CTO of &lt;a href=&#34;https://ping.gg/&#34;&gt;Ping&lt;/a&gt;. He talks
about web development and software development in general, you can find him on
Twitch streaming or watch the cuts on YouTube. I remembered he said something
along the lines of, if he was going to make a realtime app, he would use Ably or
PubNub, Pusher rather than doing it from scratch. Or he could use Socket.io
because he didn&amp;rsquo;t know anything more popular than that. Of course, I didn&amp;rsquo;t know
what&amp;rsquo;s the differences, so I went scavenge on Google and landed on Ably.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a realtime platform as a service. You use Ably services to do realtime
things, like making a chat app or a game, or broadcasting a match or something
like that. But, they present those things on their website in a super generic
way, and I had no idea what Ably was technically. Is it a WebSocket server? Is
it a complete solution? Is it some kind of enterprise super-scale thingy like
AWS?&lt;/p&gt;
&lt;p&gt;To be honest, I don&amp;rsquo;t know how I figured out that Ably provides channels that we
can pub/sub to and Ably Queues is a Message Queue, so without further ado, let&amp;rsquo;s
dive into the architecture overview.&lt;/p&gt;
&lt;h2 id=&#34;architecture-overview&#34;&gt;Architecture Overview&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&#34;Architecture Diagram&#34; src=&#34;http://localhost:1313/images/uploads/syo26ia6z.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can start with the clients. The clients are, for example, the browser chat
app or a game client. They publish messages to the &amp;ldquo;Control&amp;rdquo; message channel,
something like player movement controls, or chat messages. The only subscriber
that subscribes to the &amp;ldquo;Control&amp;rdquo; message channel is the Ably Queue (you can set
it up so that publishers can only publish but not subscribe to a channel). Ably
Queue is a thing that takes messages from a message channel (among other
sources) and puts them in a queue, awaiting their destinations.&lt;/p&gt;
&lt;p&gt;Ably Queue ensures that a message only goes to one subscriber exactly once.
Technically it&amp;rsquo;s hard, but &lt;a href=&#34;https://ably.com/blog/achieving-exactly-once-message-processing-with-ably&#34;&gt;seems like they can be done.&lt;/a&gt; What I care though
is the fact that &lt;a href=&#34;https://ably.com/docs/general/queues&#34;&gt;messages are evenly distributed to its subscribers&lt;/a&gt;, i.e.
our workers. Because of that, we can design our workers to be stateless so that
it doesn&amp;rsquo;t matter which worker receives the message. The state lives in Redis,
which all workers share.&lt;/p&gt;
&lt;p&gt;The workers, after processing the &amp;ldquo;Control&amp;rdquo; messages, will publish the
&amp;ldquo;response&amp;rdquo; to the &amp;ldquo;Server Broadcast&amp;rdquo; message channel. They of course will have
the option to not send any message at all, send one, or send many messages.
These messages will be broadcast to all clients.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But, what if we want to send a message to a specific client only?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ah. Two options, you can either send the messages to a private message channel
that only the recipient subscribes to, or you can encrypt it in a way that only
the recipient can decrypt.&lt;/p&gt;
&lt;h2 id=&#34;demo&#34;&gt;Demo&lt;/h2&gt;
&lt;p&gt;I made a Tic Tac Toe game that implements this architecture.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ttt.hxann.com&#34;&gt;Try the game live here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/intagaming/tic-tac-toe&#34;&gt;The Next.js frontend &amp;ldquo;Client&amp;rdquo; GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/intagaming/tic-tac-toe-worker&#34;&gt;The Go worker GitHub repository&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-ticker-extension&#34;&gt;The &amp;ldquo;Ticker&amp;rdquo; extension&lt;/h2&gt;
&lt;p&gt;Often times there will be a timer that counts down things if you&amp;rsquo;re making a
game. In a turn-based game, it might be the turn&amp;rsquo;s countdown timer or a match
timer. In a more realtime game like Counter-Strike Global Offensive, it might be
the time of a round, about 2 minutes.&lt;/p&gt;
&lt;p&gt;Let me introduce you to a familiar unit of time, called &amp;ldquo;a tick&amp;rdquo;. It&amp;rsquo;s just like
a second, or a minute, or an hour, or a day. The thing we want to invoke after
each time a tick passes is called a Ticker. For context, CSGO&amp;rsquo;s dedicated server
can be 64 or 128 ticks per second. Minecraft servers are 20 ticks per second (or
at least they try to be).&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Architecture Extended&#34; src=&#34;http://localhost:1313/images/uploads/distributed-realtime-architecture-extended_f3olml.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;So, a Ticker does just that. It runs some code every time a tick passes. It&amp;rsquo;s a
continually running thing, 24/7. But our Tickers have a special trick up their
sleeves: they can also share their workload. What I mean by &amp;ldquo;sharing workload&amp;rdquo;
is, if you have 100 Tickers and 500 game matches running, each of our 100
Tickers will all go and pick a game match that needs ticking, then take their
time to do their job. They pick from a cluster of 500 game matches. No single
Ticker is associated with any specific game match. If Game Match A is picked and
being ticked by Ticker 1, then the other 99 tickers will know to go and pick
Game Match B, Game Match C, etc.&lt;/p&gt;
&lt;p&gt;Immediately after ticking a game match, the Ticker will go and pick the next
one, if any game match needs ticking at that moment. They can also go into Idle
Mode if there&amp;rsquo;s no job to do after a while. The process of picking a game match
to tick, which includes Locking, Ticking, Scheduling, Idling etc. is pretty
complex. &lt;a href=&#34;https://github.com/intagaming/tic-tac-toe-worker&#34;&gt;Check out the source code for the worker&lt;/a&gt; (which also includes the
package for the Ticker) to get to the nitty-gritty.&lt;/p&gt;
&lt;p&gt;Of course, you can have 500 Tickers 500 game matches, or 1 Ticker 500 game
matches, or 1000 Tickers 1 game match. That depends on the time it takes to run
the logic code each tick, and the consistent timing of the ticking that you
tolerate (because Tickers are going picking game matches, not scheduled to do
so).&lt;/p&gt;
&lt;h2 id=&#34;retrospect&#34;&gt;Retrospect&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m pretty new to the world of distributed and realtime thingies. There are
problems that I encountered like Locking, but I didn&amp;rsquo;t grasp the full picture
yet. Though, it was a good learning opportunity.&lt;/p&gt;
&lt;p&gt;This motivated me to make an Architecture browser, like a library of
architectures laid out in some easy-to-understand way. They must be practical
and relevant in this modern world. There are modern solutions to solve old
problems, and as an emerging citizen of an emerging new world, I want to
document and elaborate on things happening just to stay informed in some way.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Types of knowledge in Software Engineering</title>
      <link>http://localhost:1313/posts/types-of-knowledge-in-software-engineering/</link>
      <pubDate>Mon, 27 Jun 2022 12:25:00 +0700</pubDate>
      
      <guid>http://localhost:1313/posts/types-of-knowledge-in-software-engineering/</guid>
      <description>A decent engineer should be able to differentiate the types of knowledge they&amp;rsquo;ll be acquiring throughout their research/learning time. Here is my take on it, based on what I know and encountered when I was researching OAuth.
Facts Facts are the absolute truth and are always right.
But sometimes even the inventor of a technology couldn&amp;rsquo;t condense the fact into the docs. Things he/she thought is true might not actually be true.</description>
      <content>&lt;p&gt;A decent engineer should be able to differentiate the types of knowledge they&amp;rsquo;ll
be acquiring throughout their research/learning time. Here is my take on it,
based on what I know and encountered when I was researching OAuth.&lt;/p&gt;
&lt;h2 id=&#34;facts&#34;&gt;Facts&lt;/h2&gt;
&lt;p&gt;Facts are the absolute truth and are always right.&lt;/p&gt;
&lt;p&gt;But sometimes even the inventor of a technology couldn&amp;rsquo;t condense the fact into
the docs. Things he/she thought is true might not actually be true. Though it
happens only on some occasions, everyone should always take things with a grain
of salt, which leads to the&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;original-knowledge&#34;&gt;Original knowledge&lt;/h2&gt;
&lt;p&gt;Original knowledge are things that the original creator says that they&amp;rsquo;re true.
For example, if they say it is &lt;em&gt;blazingly fast&lt;/em&gt;, then indeed it is. 🐧&lt;/p&gt;
&lt;p&gt;Original knowledge ranges from the original documentation to the Request For
Comment (RFC). Anything authoritative from credible sources is considered
original knowledge. It is most of the time the correct place to look for
answers, but if there is no answer to the problem one&amp;rsquo;s searching for, then it
gets a little bit more tricky.&lt;/p&gt;
&lt;h2 id=&#34;speculation-knowledge&#34;&gt;Speculation knowledge&lt;/h2&gt;
&lt;p&gt;Suppose there is a problem that no one has ever solved. They seek help from
StackOverflow, and some hospitable people on SO came and authored a genius
solution. Sometimes it is indeed, but you might have already figured out that I
lied about the former if you&amp;rsquo;re a seasoned engineer.&lt;/p&gt;
&lt;p&gt;Speculation knowledge are things &lt;em&gt;people&lt;/em&gt; come up with. By &lt;em&gt;people&lt;/em&gt; I mean the
people who have not comprehended the entirety of the problem but still came up
with an answer decent enough that makes a portion of people think that it is
correct.&lt;/p&gt;
&lt;p&gt;The problem with this type of knowledge is that it is not necessary the right
answer or solution, but it is sometimes so widespread that it is believed to be
true. For example:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/a/61106253&#34;&gt;Link to the answer on SO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/uploads/where-to-store-access-token-in-react-js_hzelfl.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s gotten some hefty upvotes eh?&lt;/p&gt;
&lt;p&gt;There are some words that are present in the proposed solution: &amp;ldquo;recommend&amp;rdquo; and
&amp;ldquo;suggested&amp;rdquo;. That&amp;rsquo;s why this kind of solution is considered, in my opinion,
speculation.&lt;/p&gt;
&lt;p&gt;(&lt;strong&gt;Technical warning&lt;/strong&gt;) To be clear, there is nothing wrong with the solution.
It works if the Access Token cookie is set by the backend which also serves API
endpoints. But what if it doesn&amp;rsquo;t? If the OP suddenly wants to &amp;ldquo;Login with
Google&amp;rdquo;, so the server which spits out the Access Token cookie is Google, and
the backend is homemade, then how does the backend access the cookie? Certainly,
the solution only applies to a very specific scenario, and it is not clearly
highlighted: the exact scenario is not mentioned in the solution, and there is
no mention of any alternatives.&lt;/p&gt;
&lt;p&gt;Adding some significant upvotes and you have a popular speculation knowledge.
This is kind of a no-brainer, but do your research before applying blindly.&lt;/p&gt;
&lt;h2 id=&#34;inferred-knowledge&#34;&gt;Inferred knowledge&lt;/h2&gt;
&lt;p&gt;Inferred knowledge are things an engineer considered correct but no one has ever
told them so. It&amp;rsquo;s mostly intuition, and it &lt;em&gt;might&lt;/em&gt; be correct. For something to
be &amp;ldquo;correct&amp;rdquo; takes some validation and sometimes &lt;em&gt;opinion&lt;/em&gt;, but if the knowledge
turns out to be a misunderstanding assumption, then the knowledge serves very
little purpose.&lt;/p&gt;
&lt;p&gt;For example, based on what you know from a book from college about how a CPU
does its caching, you can infer that your CPU also does the same thing. But it
is an assumption because no one has ever told you that your exact model of CPU
does the same method of caching. The assumption &lt;em&gt;might&lt;/em&gt; be correct, but to be
sure, you have to dig much deeper than widespread knowledge.&lt;/p&gt;
&lt;p&gt;Making assumptions about how things work is a very normal engineer&amp;rsquo;s thing to
do. But the truth is sometimes not that trivial. Really dig deep into the truth.
That is what really separates an engineer from a normie (seriously.)&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>About OpenAPI, its tools, and design-first APIs</title>
      <link>http://localhost:1313/posts/about-openapi-its-tools-and-design-first-apis/</link>
      <pubDate>Tue, 07 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/about-openapi-its-tools-and-design-first-apis/</guid>
      <description>When it comes to designing a web API, OpenAPI is the standard. It&amp;rsquo;s everywhere, it&amp;rsquo;s also known under the name Swagger (whatever Swagger product they&amp;rsquo;re called). But if you have ever written an OpenAPI specification document, I think you would have visited the OpenAPI reference too many times to be comfortable.
OpenAPI is too enormous and hard to write. OpenAPI is too complicated to write (by hand).
Describing an API is hard enough.</description>
      <content>&lt;p&gt;When it comes to designing a web API, OpenAPI is the standard. It&amp;rsquo;s everywhere,
it&amp;rsquo;s also known under the name Swagger (whatever Swagger product they&amp;rsquo;re
called). But if you have ever written an OpenAPI specification document, I think
you would have visited the OpenAPI reference too many times to be comfortable.&lt;/p&gt;
&lt;h2 id=&#34;openapi-is-too-enormous-and-hard-to-write&#34;&gt;OpenAPI is too enormous and hard to write.&lt;/h2&gt;
&lt;p&gt;OpenAPI is too complicated to write (by hand).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Describing an API is hard enough. Doing that while having to think about an
arbitrary syntax is so unnecessary that I couldn&amp;rsquo;t concentrate.&lt;/li&gt;
&lt;li&gt;Knowing what you&amp;rsquo;re supposed to fill in for an OpenAPI object is not trivial.
There are &lt;em&gt;Request Body Object&lt;/em&gt;, &lt;em&gt;Parameter Object&lt;/em&gt;, &lt;em&gt;Schema Object&lt;/em&gt; and some
more, each one needs a different set of fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are &lt;a href=&#34;https://openapi.tools/#gui-editors&#34;&gt;GUIs&lt;/a&gt; to ease this pain. I like Stoplight Studio. It&amp;rsquo;s stylish,
and gets things done.&lt;/p&gt;
&lt;h2 id=&#34;tools-that-generate-apis-from-openapi-spec-are-opinionated-bloated-and-limiting&#34;&gt;Tools that generate APIs from OpenAPI spec are opinionated, bloated, and limiting.&lt;/h2&gt;
&lt;p&gt;Take &lt;a href=&#34;https://openapi-generator.tech&#34;&gt;openapi-generator&lt;/a&gt;. It takes an OpenAPI spec file and generates server
or client code in whatever language or framework that you chose.&lt;/p&gt;
&lt;p&gt;However, after I generated an API, I questioned:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is this structure that it outputs? Is this best practice that&amp;rsquo;s taken
somewhere? Is it really the best practice? How can I extend from these?&lt;/li&gt;
&lt;li&gt;What are these naming schemes?&lt;/li&gt;
&lt;li&gt;What are these &amp;ldquo;design patterns&amp;rdquo;?&lt;/li&gt;
&lt;li&gt;What &amp;ldquo;customizations&amp;rdquo; do I have?&lt;/li&gt;
&lt;li&gt;What happens when I want to update my OpenAPI spec? What files should I keep
from being overwritten?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think every OpenAPI generators have the same flaws. I decided to not use one,
and manually implement an API. But&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;tools-that-validate-apis-with-their-openapi-spec-are-not-mainstreamed&#34;&gt;Tools that validate APIs with their OpenAPI spec are not mainstreamed.&lt;/h2&gt;
&lt;p&gt;I want to know if my implementation is in sync with its OpenAPI spec. But maybe
not every validating tool is created equal.&lt;/p&gt;
&lt;p&gt;I programmed in Go, so I looked at &lt;a href=&#34;https://github.com/getkin/kin-openapi&#34;&gt;&lt;code&gt;kin-openapi&lt;/code&gt;&lt;/a&gt;. To be honest, I don&amp;rsquo;t
even know what I&amp;rsquo;m looking at. The introduction is as generic as it can be. At
least I could maybe find a &amp;ldquo;recipe&amp;rdquo; for validating the &amp;ldquo;HTTP
requests/responses&amp;rdquo;. Still, it lacks clarity as to what it is doing under the
hood. If you don&amp;rsquo;t know what attributes of the requests/responses it&amp;rsquo;s even
validating, why do you use a validation tool?&lt;/p&gt;
&lt;p&gt;There might still be a perfect tool for this purpose, but I still have yet to
find a mainstreamed-enough tool good enough that it&amp;rsquo;s as popular as the OpenAPI
specification itself. It should be.&lt;/p&gt;
&lt;h2 id=&#34;the-alternatives-are-sometimes-not-very-good&#34;&gt;The alternatives are sometimes not very good.&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve tried &lt;a href=&#34;https://goa.design&#34;&gt;Goa&lt;/a&gt;, a design-first framework to create web services. It has its
own Domain-Specific Language (DSL) that is, I suppose, a set or combination of
syntax in Go specific to creating web services. You write a specification in Go,
and it &lt;strong&gt;generates&lt;/strong&gt; the interfaces, followed by an implementation to use those
interfaces.&lt;/p&gt;
&lt;p&gt;First, minor detail, there are limitations in the DSL itself. I encountered a
problem where it doesn&amp;rsquo;t allow a field in the response to be &lt;code&gt;nullable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Second, the implementation is structured in a way that is very opinionated and
unclear to extend upon. I guess it&amp;rsquo;s a template and I can use my Go imagination
to de-magicify them, but oh well.&lt;/p&gt;
&lt;p&gt;Third, the middleware system in Goa is so confusing. I don&amp;rsquo;t know how to fetch
any type of params in the Endpoint Middleware. Each type of router has different
ways to fetch those, and I don&amp;rsquo;t know what router Goa uses. At least it&amp;rsquo;s
nowhere found in the Goa documentation.&lt;/p&gt;
&lt;p&gt;And, this &lt;a href=&#34;https://goa.design/design/security&#34;&gt;Security&lt;/a&gt; documentation of Goa doesn&amp;rsquo;t even exist anymore in the
current documentation. Just go to &lt;a href=&#34;https://goa.design&#34;&gt;goa.design&lt;/a&gt; and try to find the Security
page on the navigation bar.&lt;/p&gt;
&lt;p&gt;After all, Goa is still a framework, and my use case seems to be on the edge
cases. Maybe they will address these soon, but I won&amp;rsquo;t care anymore. I think
I&amp;rsquo;ve had enough for an API framework.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I would for now stick with OpenAPI with GUIs, and manually implement the API.
The &lt;a href=&#34;https://oai.github.io/Documentation/start-here.html&#34;&gt;OpenAPI wonderland&lt;/a&gt; hasn&amp;rsquo;t delivered yet, but I&amp;rsquo;ll be waiting.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>About the hesitancy in reading Software Engineering writings</title>
      <link>http://localhost:1313/posts/about-the-hesitancy-in-reading-software-engineering-writings/</link>
      <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/about-the-hesitancy-in-reading-software-engineering-writings/</guid>
      <description>Over my university years, I&amp;rsquo;ve noticed that my peers don&amp;rsquo;t have a keen on reading technological writings, i.e. tech documentations, or articles on a tech topic. They prefer watching videos or, somewhat unfortunately, read articles that are &amp;ldquo;easy to understand&amp;rdquo; but lack the credibility or depth, usually from incompetent writers (I&amp;rsquo;ll show you some).
There is nothing wrong with how you perceive information, but if you are so determined on not reading the documentation for a piece of software from its creators, I can confidently tell you that you are doing things fundamentally wrong.</description>
      <content>&lt;p&gt;Over my university years, I&amp;rsquo;ve noticed that my peers don&amp;rsquo;t have a keen on
reading technological writings, i.e. tech documentations, or articles on a tech
topic. They prefer watching videos or, somewhat unfortunately, read articles
that are &amp;ldquo;easy to understand&amp;rdquo; but lack the credibility or depth, usually from
incompetent writers (I&amp;rsquo;ll show you some).&lt;/p&gt;
&lt;p&gt;There is nothing wrong with how you perceive information, but if you are &lt;em&gt;so&lt;/em&gt;
determined on not reading the documentation for a piece of software from its
creators, I can confidently tell you that you are doing things fundamentally
wrong. How wrong, you ask?&lt;/p&gt;
&lt;h2 id=&#34;an-example-of-skipping-documentations&#34;&gt;An example of skipping documentations&lt;/h2&gt;
&lt;p&gt;Granted, some documentations are just utterly awful (I&amp;rsquo;m looking at you, &lt;em&gt;Java
documentation&lt;/em&gt;). But let&amp;rsquo;s look at a proper, &lt;strong&gt;manly&lt;/strong&gt; documentation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOTE: A technical writing on a specific topic that is referenced by the
maintainers of the software could be considered a documentation. Examples can be
&lt;a href=&#34;https://nextjs.org/docs/getting-started&#34;&gt;the Next.js&amp;rsquo; documentation&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You want to learn &lt;em&gt;Node.js&lt;/em&gt;. One-liner: &lt;em&gt;Node.js&lt;/em&gt; is the thing that runs
JavaScript outside of the browser, and you want to learn &lt;em&gt;Node.js&lt;/em&gt; to write
backends with JavaScript. So you look for a tutorial.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s hit YouTube, the &lt;em&gt;default&lt;/em&gt; source of graduates&amp;rsquo; knowledge. Here&amp;rsquo;s one:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/uploads/idnbo6lug.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;8 hours!?&amp;rdquo; says a graduate. They proceed anyway. How many of you actually went
through an 8-hour tutorial and feels superior afterwards?&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how I would do it. I go to Google and search for &lt;em&gt;Node.js&lt;/em&gt;, and click the
official &lt;em&gt;Node.js&lt;/em&gt; website, &lt;code&gt;nodejs.org&lt;/code&gt;. I click &lt;em&gt;Docs&lt;/em&gt;, then &lt;em&gt;Guides&lt;/em&gt;, and
then &lt;em&gt;Getting Started Guide&lt;/em&gt;. Just one more step, I click &lt;em&gt;Introduction to
Node.js&lt;/em&gt; highlighted in green color.&lt;/p&gt;
&lt;p&gt;Here I am, the link that&amp;rsquo;s recommended by the Node.js officials, &lt;em&gt;Introduction
to Node.js&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/uploads/g6zly4qwc.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;As a newcomer, not only this page tells me what is Node.js, it also instructs me
about what I need to know before learning &lt;em&gt;Node.js&lt;/em&gt;. The &lt;em&gt;Getting Started&lt;/em&gt;
section does exactly what it implies: &lt;strong&gt;Getting Started&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://localhost:1313/images/uploads/mszm-arlu.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Take the page &lt;em&gt;The Node.js fs module&lt;/em&gt; for example, which is the &amp;ldquo;File System&amp;rdquo;
module. It is as concise as it is possible. I&amp;rsquo;m sure you can read this in 5
minutes. Not only the YouTube version 3 times lengthier, if you need to review
something, you might be lost rewinding the video to a very specific timestamp
instead of just scrolling by maybe half a page.&lt;/p&gt;
&lt;p&gt;If you value your time, then I think I have to persuade you no more.&lt;/p&gt;
&lt;h2 id=&#34;i-can-not-focus-when-reading&#34;&gt;&amp;ldquo;I can NOT focus when reading!&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s totally fine! I could say this much to you: There are incredible sources
from ingenious people in your subject of interest that are &lt;strong&gt;only&lt;/strong&gt; available
through books or writings of some sort. The choice is yours.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what&amp;rsquo;s needed for an article to be &amp;ldquo;engaging&amp;rdquo; (for me):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The article must be &lt;strong&gt;exactly&lt;/strong&gt; what I seek.&lt;/li&gt;
&lt;li&gt;The article must be in good format. No unnecessary wordings to waste my time.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I know everything that the article presents but doesn&amp;rsquo;t explain.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The article must lead me somewhere. &lt;strong&gt;I must be able to guess things ahead of
time.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Skim-able.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before you go, I have some not-the-best-quality writings that I want to show
you, so you&amp;rsquo;d know what kind of writings to avoid.&lt;/p&gt;
&lt;h2 id=&#34;bad-writing-examples-backend-development-is-not-hard&#34;&gt;Bad Writing Examples: &amp;ldquo;Backend Development Is Not Hard&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://mudit.hashnode.dev/backend-development-is-not-hard&#34;&gt;Source.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article was on daily.dev one day. I had skimmed through it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;TL;DR&lt;/em&gt;: A short &amp;ldquo;What is a web server?&amp;rdquo; section, followed by a tutorial on
installing Node.js, Express.js and run an HTTP server.&lt;/p&gt;
&lt;p&gt;Is this whole article justifies the &amp;ldquo;Backend Development Is Not Hard&amp;rdquo; statement
in the title? I&amp;rsquo;ll get straight into the weeds: Backend Development is &lt;strong&gt;hard&lt;/strong&gt;.
Doubt? Go on and do backend for a month, maybe two, then evaluate your knowledge
with the &lt;a href=&#34;https://roadmap.sh/backend&#34;&gt;Backend Roadmap&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Does a doctor say, &amp;ldquo;Being doctor is easy feet&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;You get the point. Nothing is easy, and if someone tells you otherwise, they are
trying to sell you something.&lt;/p&gt;
&lt;p&gt;If I were a backend newbie, and I want to use JavaScript, I would do the Node.js
Getting Started, then trying to create a backend immediately. Maybe I need a
database, or need a config file, or &lt;code&gt;async&lt;/code&gt;, or maybe Load Balancing, but until
I need those, I don&amp;rsquo;t care, and &lt;strong&gt;no one&lt;/strong&gt; will try to teach me things I don&amp;rsquo;t
care &lt;em&gt;yet&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;bad-writing-examples-git-branching-for-small-teams&#34;&gt;Bad Writing Examples: &amp;ldquo;Git branching for small teams&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/&#34;&gt;Source.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an article in the &amp;ldquo;Top&amp;rdquo; page of &lt;code&gt;dev.to&lt;/code&gt;. &amp;ldquo;Elite&amp;rdquo;, you might say.&lt;/p&gt;
&lt;p&gt;One question only: Do you &lt;strong&gt;really&lt;/strong&gt; need to branch?&lt;/p&gt;
&lt;p&gt;If you can&amp;rsquo;t answer this question (or the article doesn&amp;rsquo;t say, as in the article
above), you should not read this article at all, or any &amp;ldquo;Git branching guide&amp;rdquo;.
&lt;a href=&#34;https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/&#34;&gt;Here&amp;rsquo;s why you don&amp;rsquo;t branch (mostly), if you are interested.&lt;/a&gt; It&amp;rsquo;s like
learning how to fly a plane without knowing &lt;strong&gt;why&lt;/strong&gt; you need to do so.&lt;/p&gt;
&lt;p&gt;This article doesn&amp;rsquo;t explain the situations when you might need to branch. Don&amp;rsquo;t
assume you always branch. Additionally, I don&amp;rsquo;t think I will read this anytime
soon. I consider this article &amp;ldquo;misleading&amp;rdquo;, especially for newcomers.&lt;/p&gt;
&lt;p&gt;If you have no idea why you&amp;rsquo;re reading the thing, don&amp;rsquo;t.&lt;/p&gt;
&lt;h2 id=&#34;bad-writing-examples-step-by-step-coding-articles&#34;&gt;Bad Writing Examples: Step-by-step coding articles&lt;/h2&gt;
&lt;p&gt;Didn&amp;rsquo;t come up with any particular example. But there are some identifying
features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A big wall of code.&lt;/li&gt;
&lt;li&gt;Doesn&amp;rsquo;t explain everything. Yeah, I need &lt;strong&gt;everything&lt;/strong&gt; in a coding article to
be explained, or at least self-explanatory.&lt;/li&gt;
&lt;li&gt;Heavily, but badly opinionated.&lt;/li&gt;
&lt;li&gt;Use of external packages that are not essential.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It takes skills to read these kind of articles, otherwise it has &lt;strong&gt;big&lt;/strong&gt;
consequences. If you can&amp;rsquo;t identify good coding, close the tab and stick to the
basic.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hope you will find some good articles to read soon. Here&amp;rsquo;s one I&amp;rsquo;ve read today:
&lt;a href=&#34;https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/&#34;&gt;HTTP/3 From A To Z: Core Concepts&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Using Supabase Authentication on Expo</title>
      <link>http://localhost:1313/posts/using-supabase-authentication-on-expo/</link>
      <pubDate>Fri, 24 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/using-supabase-authentication-on-expo/</guid>
      <description>I will start in the order of the steps you would want to do with a new Expo project. Although you could figure out Supabase Authentication via this blog, I highly recommend following Supabase documentation first, starting with the non-native version.
Checkout the initialization of a brand new Expo project since expo init here.
Supabase initialization // src/lib/supabase.ts import AsyncStorageLib from &amp;#34;@react-native-async-storage/async-storage&amp;#34;; import { createClient } from &amp;#34;@supabase/supabase-js&amp;#34;; import Constants from &amp;#34;expo-constants&amp;#34;; export const supabaseConfig = Constants.</description>
      <content>&lt;p&gt;I will start in the order of the steps you would want to do with a new Expo
project. Although you could figure out Supabase Authentication via this blog, I
highly recommend following Supabase documentation first, starting with the
non-native version.&lt;/p&gt;
&lt;p&gt;Checkout the initialization of a brand new Expo project since &lt;code&gt;expo init&lt;/code&gt;
&lt;a href=&#34;https://github.com/intagaming/expo-todo/tree/f0ec63c75cc1769f63db7f4ee8094d74039b00c6&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;supabase-initialization&#34;&gt;Supabase initialization&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/lib/supabase.ts
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AsyncStorageLib&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@react-native-async-storage/async-storage&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;createClient&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@supabase/supabase-js&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Constants&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expo-constants&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supabaseConfig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Constants&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;manifest&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;extra&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;supabase&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supabase&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createClient&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;supabaseConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;supabaseConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;publicKey&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;localStorage&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;AsyncStorageLib&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supabase&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice how I&amp;rsquo;m using the &lt;code&gt;localStorage&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;I use &lt;code&gt;app.json&lt;/code&gt; to configure Supabase, simply because I haven&amp;rsquo;t found any
reason to use something like environment variables for a mobile app.
&lt;a href=&#34;https://docs.expo.dev/workflow/configuration/&#34;&gt;Learn more about configuring Expo app with app.json.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One thing I should note,
&lt;a href=&#34;https://docs.expo.dev/versions/latest/sdk/auth-session/#it-makes-redirect-url-allowlists-easier-to&#34;&gt;you need to set a &lt;code&gt;scheme&lt;/code&gt; in your &lt;code&gt;app.json&lt;/code&gt; in order for the Expo redirection proxy to work&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;auth-context&#34;&gt;Auth Context&lt;/h1&gt;
&lt;p&gt;Since it&amp;rsquo;s a client-side app (of course it is), I would store the Auth Session
in a React Context because it &lt;strong&gt;absolutely&lt;/strong&gt; does NOT need Redux. It is heavily
inspired from Kent C. Dodds&amp;rsquo; &lt;a href=&#34;https://kentcdodds.com/blog/how-to-use-react-context-effectively&#34;&gt;&amp;ldquo;How to use React Context effectively&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code below is &lt;strong&gt;long&lt;/strong&gt; and contains documentation &amp;amp; explainations. You can
find various stripped-out version of this context on the internet, but I&amp;rsquo;ve gone
through and solve some of these following problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supabase uses &lt;code&gt;setTimeout&lt;/code&gt; for refreshing the Access Token. In the context of
Native apps, the app might be backgrounded, so it warns you about that. We can
safely ignore this, check the explanation in the code.&lt;/li&gt;
&lt;li&gt;If the app &lt;em&gt;cold starts&lt;/em&gt;, even if the user has signed in before, the
&lt;code&gt;AsyncStorage&lt;/code&gt; on the Native would not response &lt;em&gt;synchronously&lt;/em&gt;, hence causing
the login screen to flash for a second. Solution, documentation and
explanation is in the code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;useAuthUser&lt;/code&gt; fetches the user from the session. It is, my by intention,
included in the same file. Doesn&amp;rsquo;t make sense to put that anywhere else.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/state/auth-context.tsx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AsyncStorageLib&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@react-native-async-storage/async-storage&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthSession&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@supabase/supabase-js&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;createContext&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;ReactNode&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;useContext&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;useEffect&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;useMemo&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;useState&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;LogBox&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;react-native&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;isBrowser&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../lib/helpers&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supabase&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../lib/supabase&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;State&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;AuthSession&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthContext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createContext&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;State&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;undefined&lt;/span&gt;&amp;gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthContextProvider&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt; }&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;ReactNode&lt;/span&gt; }) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * What the session state can tell us:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * - undefined: The session is being loaded.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * - null: The session is fetched and is unavailable.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * - AuthSession: There is a session.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;setSession&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useState&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;AuthSession&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;undefined&lt;/span&gt;&amp;gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;useEffect&lt;/span&gt;(() &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * About the &amp;#34;Setting a timer for a long period of time...&amp;#34; warning:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Take a look at this GitHub response: https://github.com/facebook/react-native/issues/12981#issuecomment-652745831
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * It says:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * &amp;gt; If you don&amp;#39;t mind having your timer get activated later when the app is
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * &amp;gt; foregrounded again, then I think ignoring the YellowBox warning is a good idea.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * The timer is for the token refresh task, from GoTrueClient.js. When the access token is expired,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  the access token needs to be refreshed. For a 1 hour JWT expiration duration on Supabase,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  it is scheduled when 59 minutes has passed. If it could not run at that specific time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  because the app were not foregrounded, then the access token would be refreshed as
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  soon as the app is opened up. If it succeeded, the authentication is conserved. Otherwise,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  the session would be expired, requiring the user for a re-login.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Therefore, we can safely ignore this warning. Even in the case of the user making requests
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  while the token is being refreshed, they should fail as they are using the expired token.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  The failed requests should be handled accordingly instead of bringing the app to a halt.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  The refresh should be fast enough.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;LogBox&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ignoreLogs&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Setting a timer&amp;#34;&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchedSession&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supabase&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;auth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Fixing the &amp;#34;login screen flashing on app open&amp;#34; problem:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * The session could be immediately fetched on the web. But we might be using Native here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * So if it&amp;#39;s Native, we would keep the session as undefined if it&amp;#39;s not already been fetched before.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  We would then go visit the AsyncStorage, if it doesn&amp;#39;t have a session, the session would be null.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  If it has, keep the current session state because the onAuthStateChange would setSession for us later.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  It might even have done that before our check.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;setSession&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fetchedSession&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isBrowser&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fetchedSession&lt;/span&gt; : &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (&lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;isBrowser&lt;/span&gt;()) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;storageSession&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AsyncStorageLib&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;getItem&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;supabase.auth.token&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;storageSession&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;setSession&lt;/span&gt;((&lt;span style=&#34;color:#a6e22e&#34;&gt;oldSession&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#a6e22e&#34;&gt;oldSession&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;oldSession&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;authListener&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supabase&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;auth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;onAuthStateChange&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_event&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;newSession&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;setSession&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;newSession&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;authListener&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;authListener&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;unsubscribe&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }, []);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useMemo&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; ({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;AuthContext.Provider&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;value&lt;/span&gt;}&amp;gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;children&lt;/span&gt;}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;AuthContext.Provider&lt;/span&gt;&amp;gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useAuthContext&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useContext&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;AuthContext&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Error(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#e6db74&#34;&gt;`useAuthContext must be used within a AuthContextProvider.`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useAuthUser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt; } &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useAuthContext&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthContextProvider&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;useAuthContext&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;useAuthUser&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The helper file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/lib/helpers.ts
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Platform&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;react-native&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// eslint-disable-next-line import/prefer-default-export
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isBrowser&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Platform&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;OS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;web&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;login-screen&#34;&gt;Login Screen&lt;/h1&gt;
&lt;p&gt;Again, you could find various versions of this. They could not figure out how to
work with the redirect proxy that Expo provides, so I do it myself.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// src/screens/auth/Login.tsx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthSession&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;expo-auth-session&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;Pressable&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;StyleSheet&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;View&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;react-native&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supabase&lt;/span&gt;, { &lt;span style=&#34;color:#a6e22e&#34;&gt;supabaseConfig&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;../../lib/supabase&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;styles&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;StyleSheet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;create&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;alignItems&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;flex&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;justifyContent&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;center&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Login() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleGithubLogin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * Read this: https://docs.expo.dev/versions/latest/sdk/auth-session/#what--authexpoio--does-for-you
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     * In the `authUrl` we don&amp;#39;t want Supabase to know our varied URL. The auth.expo.io flow tries to hide
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  the varied URL from Supabase. So, auth.expo.io is the one who will know our varied URL, and Supabase
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     *  will only know https://auth.expo.io/@username/app-slug.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proxyRedirectUri&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthSession&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;makeRedirectUri&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;useProxy&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt; }); &lt;span style=&#34;color:#75715e&#34;&gt;// https://auth.expo.io
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;redirectUri&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthSession&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;makeRedirectUri&lt;/span&gt;({ &lt;span style=&#34;color:#a6e22e&#34;&gt;useProxy&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt; }); &lt;span style=&#34;color:#75715e&#34;&gt;// Some URL which we don&amp;#39;t know beforehand
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;provider&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthSession&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;startAsync&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;authUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;supabaseConfig&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;/auth/v1/authorize?provider=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;provider&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;amp;redirect_to=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;proxyRedirectUri&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;returnUrl&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;redirectUri&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;success&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;supabase&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;auth&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;signIn&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;refreshToken&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;response.params.refresh_token&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;View&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;styles&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;container&lt;/span&gt;}&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Text&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Login&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Text&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Pressable&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onPress&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;handleGithubLogin&lt;/span&gt;}&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Text&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Login&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GitHub&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Text&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Pressable&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;View&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;navigation&#34;&gt;Navigation&lt;/h1&gt;
&lt;p&gt;The principle is aligned with the examples on the React Navigation
documentation. Notice which screens are rendered with each possible value of
&lt;code&gt;user&lt;/code&gt;. Another thing is the &lt;code&gt;Promise.allSettled()&lt;/code&gt; polyfill that Supabase
requires, see the code for the documentation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// App.tsx
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;NavigationContainer&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@react-navigation/native&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;createNativeStackNavigator&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@react-navigation/native-stack&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;allSettled&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;promise.allsettled&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;LogoutButton&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./src/components/LogoutButton&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;RootStackParamList&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./src/navigation/types&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Login&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./src/screens/auth/Login&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Home&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./src/screens/Home&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Loading&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./src/screens/auth/Loading&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;AuthContextProvider&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;useAuthUser&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;./src/state/auth-context&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Stack&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createNativeStackNavigator&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;RootStackParamList&lt;/span&gt;&amp;gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AppNavigator() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useAuthUser&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;NavigationContainer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Stack.Navigator&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Stack.Screen&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Loading&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Loading&lt;/span&gt;} /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Stack.Screen&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Login&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Login&lt;/span&gt;} /&amp;gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&lt;span style=&#34;color:#a6e22e&#34;&gt;user&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Stack.Screen&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Home&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;component&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Home&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;options&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;{{ &lt;span style=&#34;color:#a6e22e&#34;&gt;headerRight&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;LogoutButton&lt;/span&gt; }}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &amp;lt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;Stack.Navigator&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;NavigationContainer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;App() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Polyfill for Promise.allSettled, used by Supabase. Remove when
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   *  this PR has been merged: https://github.com/then/promise/pull/171
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   * Supabase usage: https://github.com/supabase/supabase-js/commit/6cf54a2972472e259a775bd950c88dff4cd91a1f
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;   */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;allSettled&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;shim&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;AuthContextProvider&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;AppNavigator&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;AuthContextProvider&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;resources&#34;&gt;Resources&lt;/h1&gt;
&lt;p&gt;Check out the code snapshot &lt;a href=&#34;https://github.com/intagaming/expo-todo/tree/f0ec63c75cc1769f63db7f4ee8094d74039b00c6&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Consuming contents without caption</title>
      <link>http://localhost:1313/posts/consuming-contents-without-caption/</link>
      <pubDate>Thu, 23 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/consuming-contents-without-caption/</guid>
      <description>English is my first non-native language that I can read and understand reasonably well, though I could never speak or write sharply because I have never been in an environment that required me to do so. Through years of consuming YouTube, I&amp;rsquo;ve developed the ability to understand English, not extensively, but enough that I don&amp;rsquo;t need to pull out a Google Translate.
Historically, for about 4-5 years, I had been a heavy English caption user.</description>
      <content>&lt;p&gt;English is my first non-native language that I can read and understand
reasonably well, though I could never speak or write sharply because I have
never been in an environment that required me to do so. Through years of
consuming YouTube, I&amp;rsquo;ve developed the ability to understand English, not
extensively, but enough that I don&amp;rsquo;t need to pull out a Google Translate.&lt;/p&gt;
&lt;p&gt;Historically, for about 4-5 years, I had been a &lt;strong&gt;heavy&lt;/strong&gt; English caption user.
That really propelled me to get a grasp of English. However, I have noticed
recently that with the caption taking up space on my screen sitting and popping
trying to get my attention, I couldn&amp;rsquo;t focus on the content itself. It might be
a person trying to talk to me, or a graph that&amp;rsquo;s displaying informations, &lt;em&gt;I
just kind of ignored them&lt;/em&gt;. And I thought, that&amp;rsquo;s kind of a bummer.&lt;/p&gt;
&lt;p&gt;Once I could understand roughly what the narrative has to say without a caption,
I think that&amp;rsquo;s the point where I should quit abusing caption all the time. I
would now solely use caption in the instance where there are a heavy
journalistic narrative going on that I could never completely catch because I
were not born using the language, or at best trying to see the word that sounded
foreign to me. Now the screen is less cluttered, and I could really see the
person&amp;rsquo;s expression when they&amp;rsquo;re talking.&lt;/p&gt;
&lt;p&gt;This is really the experience I&amp;rsquo;ve always been dreamed of since the day that I
decided to consume English contents. I think the same could be said for watching
a film in foreign language, though I&amp;rsquo;ve never been fond of watching films
myself.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Software development education in Vietnam is extremely uncertain</title>
      <link>http://localhost:1313/posts/software-development-education-in-vietnam-is-extremely-uncertain/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/software-development-education-in-vietnam-is-extremely-uncertain/</guid>
      <description>Someone who&amp;rsquo;s teaching you right now might never be able to join the job market anymore.
Let&amp;rsquo;s keep this short. Some backgrounds:
I have a career goal of becoming a Backend Developer, and I start with Frontend. I&amp;rsquo;m currently a 3rd year at FPT University. I am getting paid (minimum middle-class salary) as an Intern to work in a Frontend project. I&amp;rsquo;m 20. So you want to be a Frontend Developer You need a Frontend framework.</description>
      <content>&lt;p&gt;Someone who&amp;rsquo;s teaching you right now might never be able to join the job market
anymore.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s keep this short. Some backgrounds:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have a career goal of becoming a Backend Developer, and I start with
Frontend.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m currently a 3rd year at FPT University.&lt;/li&gt;
&lt;li&gt;I am getting paid (minimum middle-class salary) &lt;em&gt;as an Intern&lt;/em&gt; to work in a
Frontend project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&amp;rsquo;m 20.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;so-you-want-to-be-a-frontend-developer&#34;&gt;So you want to be a Frontend Developer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You &lt;strong&gt;need&lt;/strong&gt; a &lt;em&gt;Frontend framework&lt;/em&gt;. Your school only go so far as basic HTML
&amp;amp; CSS (on Coursera, &lt;em&gt;go figure&lt;/em&gt;). No JavaScript. So just with this first point
alone, you can&amp;rsquo;t get into the job market after 4 years of university.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A professor&lt;/strong&gt; teaching C# and C# Web Development &lt;strong&gt;doesn&amp;rsquo;t know how to
proficiently write JavaScript&lt;/strong&gt;, let alone ES6 variant.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;They don&amp;rsquo;t teach you Git&lt;/strong&gt;. I doubt any one of them is knowledgeable enough
to teach Git.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, at least they&amp;rsquo;re teaching Java, C# and SQL Server for doing Backend works,
right?&lt;/p&gt;
&lt;h2 id=&#34;they-only-produce-backend-developers---you-said&#34;&gt;They only produce Backend developers! - you said&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Nobody teaches you API stuff.&lt;/strong&gt; REST API, GraphQL, it&amp;rsquo;s non-existent.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;To be a Backend Developer is no easy feat.&lt;/strong&gt; Look at
&lt;a href=&#34;https://roadmap.sh/backend&#34;&gt;the backend roadmap&lt;/a&gt; &lt;em&gt;down to the near bottom&lt;/em&gt;, that&amp;rsquo;s where the &lt;em&gt;Junior
Backend&lt;/em&gt; guy is. Doubt? I am a living proof of having worked with a Junior
Backend guy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Backend is like a dangerous world.&lt;/strong&gt; If your data is gone or leaked, your
company is gone. If your server goes down for 30 seconds, for example the
server of an eCommerce website, and they can&amp;rsquo;t place an order, they would
probably never come back.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No one hires a freshly graduated student to work in Backend.&lt;/strong&gt; Try to find a
Junior Backend job that a graduate can work in. With Frontend, I can probably
just try my luck on a Junior Frontend interview right now and no one&amp;rsquo;s
complaining.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-about-business-analyst&#34;&gt;What about Business Analyst?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I don&amp;rsquo;t know.&lt;/strong&gt; You could try, but you will probably end up at a Fresher
position and learn another year. I can&amp;rsquo;t say the things they teach at FPT is
beneficial to your job, all I can say is that &lt;strong&gt;what I&amp;rsquo;m doing at work is far
from what I think I&amp;rsquo;d do&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You really have to learn the hard way, and at scale.&lt;/p&gt;
&lt;h2 id=&#34;so-what-afterall-i-am-a-fresher-now---you-said&#34;&gt;So what? Afterall, I am a Fresher now. - you said&lt;/h2&gt;
&lt;p&gt;You really think that it takes 4 years for a person to be able to work as a
Fresher. Well &lt;em&gt;joke&amp;rsquo;s on you&lt;/em&gt;, because not only there&amp;rsquo;re people who only need
&lt;strong&gt;at most 2 years to become a Fresher&lt;/strong&gt;, by the time you graduated, they would
already be a Junior and have &lt;strong&gt;tripled&lt;/strong&gt; your salary.&lt;/p&gt;
&lt;p&gt;Let that sink in for a second. You will graduate at 21. &lt;strong&gt;I&amp;rsquo;m 20 and I have the
ability to build a software of a Junior Developer.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Going to Software university in Vietnam is not a career start.&lt;/li&gt;
&lt;li&gt;Junior Backend is easier said than done.&lt;/li&gt;
&lt;li&gt;4 years is the time it takes to become a Junior, not a Fresher.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>localStorage vs. Cookie for token storage</title>
      <link>http://localhost:1313/posts/localstorage-vs-cookie-for-token-storage/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/localstorage-vs-cookie-for-token-storage/</guid>
      <description>localStorage is not as unsecured as you&amp;rsquo;d think.
Update August 1st, 2022 I recently had a new hot take on this subject on YouTube, check it out (please click the image):
Context Some time ago, I had to store the JWT token returned from Strapi in a React web app. Strapi is a stateless server. The React app is client-side. Here&amp;rsquo;s what the internet has to say when I need to learn &amp;ldquo;jwt storage&amp;rdquo;:</description>
      <content>&lt;p&gt;localStorage is not as unsecured as you&amp;rsquo;d think.&lt;/p&gt;
&lt;h2 id=&#34;update-august-1st-2022&#34;&gt;Update August 1st, 2022&lt;/h2&gt;
&lt;p&gt;I recently had a new hot take on this subject on YouTube, check it out (please click the image):&lt;/p&gt;


    
    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;eager&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/OTcjpteMB6c?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h2 id=&#34;context&#34;&gt;Context&lt;/h2&gt;
&lt;p&gt;Some time ago, I had to store the JWT token returned from Strapi in a React web
app. Strapi is a &lt;strong&gt;stateless&lt;/strong&gt; server. The React app is &lt;strong&gt;client-side&lt;/strong&gt;. Here&amp;rsquo;s
what the internet has to say when I need to learn &amp;ldquo;jwt storage&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;jwt-storage-google&#34; src=&#34;http://localhost:1313/images/uploads/jwt-storage-google_pq7lyt.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Seems like most opposed to the idea of using &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What about &amp;ldquo;react jwt storage&amp;rdquo;?&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;react-jwt-storage-google&#34; src=&#34;http://localhost:1313/images/uploads/react-jwt-storage-google_m8on8v.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;First one that recommends &lt;code&gt;localStorage&lt;/code&gt;! Hmm, there are also people that
recommend storing JWT in Cookie. Also, there&amp;rsquo;s a recommendation of using
in-memory storage. &lt;a href=&#34;https://auth0.com/docs/secure/security-guidance/data-security/token-storage#browser-in-memory-scenarios&#34;&gt;It&amp;rsquo;s not persistent. I don&amp;rsquo;t want to login every page
refreshes.&lt;/a&gt; So let&amp;rsquo;s not talk about it.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dig into &lt;a href=&#34;https://stackoverflow.com/questions/39176237/how-do-i-store-jwt-and-send-them-with-every-request-using-react&#34;&gt;the first StackOverflow post&lt;/a&gt; above:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;jwt-first-so-answer&#34; src=&#34;http://localhost:1313/images/uploads/jwt-first-so-answer_kbfpiz.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Okay. They said that I should use cookies and refresh token instead. And the
Refresh Token should be stored in a cookie with &lt;code&gt;httpOnly&lt;/code&gt; flag. Hold that idea
for a second.&lt;/p&gt;
&lt;p&gt;How about &lt;a href=&#34;https://stackoverflow.com/questions/69294536/where-to-store-jwt-token-in-react-client-side-in-secure-way&#34;&gt;the second post&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;jwt-second-so-answer&#34; src=&#34;http://localhost:1313/images/uploads/jwt-second-so-answer_rhln47.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Interesting. Two posts that recommend the same Cookie approach. Look at the 3rd
point. They said that I should store my JWT in a Cookie, because in point number
2, &lt;code&gt;localStorage&lt;/code&gt; is exposed to XSS. Is Cookie &lt;strong&gt;immune to XSS&lt;/strong&gt;? What about
&lt;strong&gt;CSRF&lt;/strong&gt;? My server is stateless, and as you read on this blog post further,
you&amp;rsquo;ll need to implement the &lt;em&gt;Double Submit Cookie&lt;/em&gt; CSRF prevention technique
(I&amp;rsquo;m using &lt;strong&gt;stateless&lt;/strong&gt; server, remember), which is &lt;strong&gt;NOT&lt;/strong&gt; immune to XSS,
because the CSRF token also needs to be present in the request body. Not to
mention that now you have to prevent both XSS &lt;em&gt;and&lt;/em&gt; CSRF. Hence the 3rd point is
not valid, in my opinion, just because of the XSS argument alone.&lt;/p&gt;
&lt;p&gt;You can see the problem here. Back then, I didn&amp;rsquo;t knowledgeable enough to know
that storing JWT in Cookie have problems. It&amp;rsquo;s easy to blindly listen to these
SO answers when you&amp;rsquo;re starting out as an intern (Yes, I had to implement this
in my internship). Obviously, this needs to be addressed. If someone is in the
same boot as me trying to get into the new Serverless world, they need to know
the reasoning behind these.&lt;/p&gt;
&lt;h2 id=&#34;original-post-starts-here&#34;&gt;Original post starts here:&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;You know the drill. Authentication time, you chuck the access token into your
&lt;code&gt;localStorage&lt;/code&gt;. Suddenly you have a flashback of bad luck working with
&lt;code&gt;localStorage&lt;/code&gt;, namely they could &lt;em&gt;easily&lt;/em&gt; be taken by a script via Cross-Site
Scripting. So you turned to &lt;code&gt;httpOnly&lt;/code&gt; cookie (along with some other attributes,
stay tuned). You even went as far as using a refresh token, and implement a CSRF
token thing. Solved, right?&lt;/p&gt;
&lt;h2 id=&#34;you-missed-a-point-about-cookies&#34;&gt;You missed a point about cookies&lt;/h2&gt;
&lt;p&gt;Whenever you touch a cookie, you are blessed with a &lt;strong&gt;new&lt;/strong&gt; problem: Cross-Site
Request Forgery a.k.a. CSRF. Take this from OWASP Cheat Sheet of CSRF
Prevention, I&amp;rsquo;ll provide an example later.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html&#34;&gt;Remember that any Cross-Site Scripting (XSS) can be used to defeat all CSRF
mitigation techniques!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s switch gears here. I&amp;rsquo;m gonna implement a CSRF mitigation. According to the
Cheat Sheet, I have to implement something called a &lt;em&gt;Double Submit Cookie&lt;/em&gt; (I&amp;rsquo;m
cutting corners here, we are in a stateless development age, there&amp;rsquo;s no server
state, just in case you wonder why not the &lt;em&gt;Synchronizer Token Pattern&lt;/em&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: This is simplified. I&amp;rsquo;m sure there&amp;rsquo;s more sophisticated ways
to perform the CSRF attack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;m at the Cheat Sheet. Here&amp;rsquo;s the steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On the server side, I would have to generate a pseudorandom value and put
them in a cookie.&lt;/li&gt;
&lt;li&gt;Every time I need to send out a request, I would put that value (also called
a CSRF token) into a header field, something along the lines of
&lt;code&gt;X-XSRF-Token&lt;/code&gt;. The Cookie from step 1 is sent along with the request.&lt;/li&gt;
&lt;li&gt;On the server side again, I would have to implement a comparison between
those two.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;rsquo;s a visualization of what&amp;rsquo;s going on:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;double-submit&#34; src=&#34;http://localhost:1313/images/uploads/double-submit_siyipg.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The end result is, if the attacker wants to do the CSRF now, they would need to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set a freshly dummy value, replacing the CSRF token in the request
body/header. Easy enough. For example:
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /user/transfer
X-CSRF-Token: MY_DUMMY_VALUE
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Modify the &lt;code&gt;csrfToken&lt;/code&gt; cookie to &lt;code&gt;MY_DUMMY_VALUE&lt;/code&gt;. &lt;em&gt;Not trivial&lt;/em&gt;, but
&lt;a href=&#34;https://owasp.org/www-pdf-archive/David_Johansson-Double_Defeat_of_Double-Submit_Cookie.pdf&#34;&gt;doable&lt;/a&gt;.
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;POST /user/transfer
Cookie: csrfToken=MY_DUMMY_VALUE
X-CSRF-Token: MY_DUMMY_VALUE
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;This request is placed within a malicious site, e.g.
&lt;code&gt;https://malicious.example&lt;/code&gt;. Using JavaScript, the POST request is submitted.
Depending on the &lt;code&gt;SameSite&lt;/code&gt; flag and the browser&amp;rsquo;s implementation, the
&lt;code&gt;accessToken&lt;/code&gt; Cookie would be sent.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Okay, it&amp;rsquo;s pretty good if combined with some &lt;code&gt;Cross-Origin-Resource-Policy&lt;/code&gt; and
&lt;code&gt;SameSite&lt;/code&gt; or some other things. CSRF solved.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://owasp.org/www-pdf-archive/David_Johansson-Double_Defeat_of_Double-Submit_Cookie.pdf&#34;&gt;Now you go read this document from OWASP and find out that your CSRF prevention
attempt is flawed.&lt;/a&gt; Then, &lt;em&gt;hopefully not&lt;/em&gt;, &lt;a href=&#34;https://stackoverflow.com/a/37169633&#34;&gt;read this from StackOverflow if
you store the csrfToken not in the cookie, but in localStorage&lt;/a&gt;. If you go as
far as using &lt;code&gt;SameSite=Strict&lt;/code&gt; setting, remember that &lt;a href=&#34;https://www.netsparker.com/blog/web-security/same-site-cookie-attribute-prevent-cross-site-request-forgery&#34;&gt;Setting a cookie as
Strict can affect browsing experience negatively&lt;/a&gt;, meaning a setting of
&lt;code&gt;SameSite=Lax&lt;/code&gt; still leaves top-level &lt;code&gt;GET&lt;/code&gt; alone.&lt;/p&gt;
&lt;p&gt;If that&amp;rsquo;s not enough, &lt;strong&gt;not all APIs are equipped with CSRF prevention
framework.&lt;/strong&gt; Google &amp;ldquo;Strapi CSRF&amp;rdquo; and you&amp;rsquo;ll basically find nothing besides of
implementing CSRF prevention yourself. Why? Because &lt;em&gt;Strapi is not setting the
token in a cookie&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However&lt;/strong&gt;, assuming that CSRF is absolutely prevented, there&amp;rsquo;s still the
elephant in the room, the &lt;em&gt;absolute&lt;/em&gt; CSRF prevention buster. Read on.&lt;/p&gt;
&lt;h3 id=&#34;heres-my-take-on-it&#34;&gt;Here&amp;rsquo;s my take on it.&lt;/h3&gt;
&lt;p&gt;See, you still &lt;strong&gt;have to&lt;/strong&gt; put the CSRF token in the body, by design. That means
your CSRF token &lt;em&gt;cannot&lt;/em&gt; be &lt;code&gt;httpOnly&lt;/code&gt;, because it prevents JavaScript from
reading the cookie. Have you realized yet? You&amp;rsquo;ve just achieved Cross-Site
Scripting. If your JavaScript can read your cookie, so do mine.&lt;/p&gt;
&lt;p&gt;Here it is again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html&#34;&gt;Remember that any Cross-Site Scripting (XSS) can be used to defeat all CSRF
mitigation techniques!&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://portswigger.net/web-security/cross-site-scripting/exploiting/lab-perform-csrf&#34;&gt;And here&amp;rsquo;s how.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you say&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But it makes the access token harder for the attacker to get than
localStorage! If not they&amp;rsquo;d just snatch it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So what? Take this, &lt;em&gt;your website has a Cross-Site Scripting problem, not CSRF&lt;/em&gt;.
Do you sleep well on that? You have just gone full circle. &lt;code&gt;localStorage&lt;/code&gt; has
XSS problem, but cookie has CSRF &lt;strong&gt;and&lt;/strong&gt; XSS. &lt;em&gt;That&amp;rsquo;s why I&amp;rsquo;m not eating the
cookies&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Side note: About the Refresh Token, it solves nothing. It is still a token.
Store it in the Cookie and you have CSRF &lt;strong&gt;and&lt;/strong&gt; XSS, just like a normal token.
You can&amp;rsquo;t use &lt;code&gt;httpOnly&lt;/code&gt; if you want to prevent CSRF.&lt;/p&gt;
&lt;h2 id=&#34;fixing-the-myth-of-localstorage-by-mending-xss&#34;&gt;Fixing the myth of localStorage by mending XSS&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s debunk this. You got the XSS problem. &lt;em&gt;Deal with it&lt;/em&gt;. There&amp;rsquo;s a reason why
&lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; exists.&lt;/p&gt;
&lt;p&gt;So where are you getting these foreign scripts to run on your site? Let&amp;rsquo;s start
with some of the greatest archnemesis of &lt;code&gt;localStorage&lt;/code&gt; doubters.&lt;/p&gt;
&lt;h3 id=&#34;xss-from-node-libraries&#34;&gt;XSS from Node libraries&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m talking about your &lt;code&gt;node_modules&lt;/code&gt; when you&amp;rsquo;re deploying on Vercel or
something. Think about it. There are literally from hundreds to millions of
projects using that very same library. If that happens, you &lt;strong&gt;would&lt;/strong&gt; know. You
would definitely know.
&lt;a href=&#34;https://docs.gitlab.com/ee/user/application_security/dependency_scanning&#34;&gt;Here&amp;rsquo;s something from GitLab to let them check for your development comfort&lt;/a&gt;.
Or just run &lt;code&gt;yarn audit&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;xss-from-cdn-libraries&#34;&gt;XSS from CDN libraries&lt;/h3&gt;
&lt;p&gt;Alright, here&amp;rsquo;s the interesting part. CDNs can be compromised. Why do you use
them though? Just use NPM. And how do you use TypeScript with CDN anyway? Why
are your libraries not available in NPM? If it&amp;rsquo;s that niche, why not just write
them yourselves if you&amp;rsquo;re literally 1 out of the 3 people that would use those?
&lt;em&gt;Why do I have so many questions for you?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using libraries from CDNs I think you&amp;rsquo;re having a bigger problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Now, to be clear.&lt;/strong&gt; Maybe you are forced to use libraries from CDNs, because
something like &amp;ldquo;They don&amp;rsquo;t update it anymore!&amp;rdquo; or &amp;ldquo;I don&amp;rsquo;t want to use NPM for
my little HTML/CSS/JS project!&amp;rdquo;. I use NPM, it&amp;rsquo;s &lt;strong&gt;the repo&lt;/strong&gt; to get JavaScript
libraries from, and I don&amp;rsquo;t have your headache.&lt;/p&gt;
&lt;h3 id=&#34;xss-from-js-injection&#34;&gt;XSS from JS injection&lt;/h3&gt;
&lt;p&gt;Also called a &lt;em&gt;Stored XSS&lt;/em&gt;. Or any JS injection from &lt;em&gt;form inputs&lt;/em&gt;. It&amp;rsquo;s pretty
hard to screw up something that would cause XSS without you knowing first-hand.
&lt;a href=&#34;https://stackoverflow.com/q/33644499&#34;&gt;Take a look at this StackOverflow on why React has some XSS-proof.&lt;/a&gt; Make
sure to make use of some ESLint rules, those are pretty handy.&lt;/p&gt;
&lt;p&gt;In the nutshell, it&amp;rsquo;s pretty hard these days to get XSS if you&amp;rsquo;re doing things
right.&lt;/p&gt;
&lt;h2 id=&#34;the-winner&#34;&gt;The winner&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;localStorage&lt;/code&gt;. I just stripped out a workday of effort in your life by doing
so. There&amp;rsquo;s nothing about that anymore, right? The stereotypical thing about
&lt;code&gt;localStorage&lt;/code&gt; is, they have XSS problem, and they do, just as your CSRF
mitigation. Don&amp;rsquo;t overengineer your system.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s something you&amp;rsquo;ll dig:
&lt;a href=&#34;https://pragmaticwebsecurity.com/articles/oauthoidc/localstorage-xss.html&#34;&gt;Why avoiding LocalStorage for tokens is the wrong solution&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The undisputable truth about &#34;coding exams&#34;</title>
      <link>http://localhost:1313/posts/the-undisputable-truth-about-coding-exams/</link>
      <pubDate>Sat, 14 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/the-undisputable-truth-about-coding-exams/</guid>
      <description>Did you not remember the damn Math.pow() in your foreign programming language?
I’m Vietnamese. I had to take a subject about Introduction to Programming back in high school, with Pascal. Do I remember how to quadruple a number in Pascal? No, of course not. I’ve recently learned about C#, not that I want to use it, it’s because it’s in my university curriculum. Do I remember how to quadruple a number, or the syntax to create an event a.</description>
      <content>&lt;p&gt;Did you not remember the damn Math.pow() in your foreign programming language?&lt;/p&gt;
&lt;p&gt;I’m Vietnamese. I had to take a subject about &lt;em&gt;Introduction to Programming&lt;/em&gt; back
in high school, with &lt;em&gt;Pascal&lt;/em&gt;. Do I remember how to &lt;strong&gt;quadruple a number&lt;/strong&gt; in
&lt;em&gt;Pascal&lt;/em&gt;? No, of course not. I’ve recently learned about &lt;em&gt;C#&lt;/em&gt;, not that I want
to use it, it’s because it’s in my university curriculum. Do I remember how to
&lt;strong&gt;quadruple a number&lt;/strong&gt;, or the syntax to create &lt;strong&gt;an event a.k.a. delegate
storing variable&lt;/strong&gt; in &lt;em&gt;C#&lt;/em&gt;? No either. Google for the rescue, right? Right?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ha.&lt;/strong&gt; It’s exam day and you are expected to recall from memory &lt;em&gt;all&lt;/em&gt; the
syntaxes those intelligent people invented, &lt;strong&gt;just to do the same exact thing&lt;/strong&gt;
thats &lt;strong&gt;engraved in your brain&lt;/strong&gt; to a point where your blood vessels in your
brain is &lt;em&gt;boiling, expanding and shrinking&lt;/em&gt; so that it can interpret into C#.
Not only your school teaches you to use WinForm in the “Basic &lt;strong&gt;Cross-Platform&lt;/strong&gt;
Application Programming With .NET”, they also want you to be a sole &lt;strong&gt;coding
machine&lt;/strong&gt; with exceptional memory of a &lt;strong&gt;documentation&lt;/strong&gt;, AND intellect to
suddenly knows the knitty things that they didn’t even teach.&lt;/p&gt;
&lt;p&gt;Bottom line is, you should be ashamed to pay them to teach you these
&lt;em&gt;Introduction to Programming&lt;/em&gt; courses. The documentations exist for a reason;
it’s &lt;strong&gt;awaiting&lt;/strong&gt; your &lt;strong&gt;usage&lt;/strong&gt;. Have you had a taste of the “coding on paper”
exams?&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>What your school teaches you about making a Facebook clone</title>
      <link>http://localhost:1313/posts/what-your-school-teaches-you-about-making-a-facebook-clone/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/what-your-school-teaches-you-about-making-a-facebook-clone/</guid>
      <description>Here&amp;rsquo;s a hot take from me.
At the higher level, I will put on 2 sides: &amp;ldquo;Static&amp;rdquo; and &amp;ldquo;Dynamic&amp;rdquo;, as in Render the whole page again versus fetch and re-render HTML elements on the fly, respectively. At the developer&amp;rsquo;s level, we can think and categorize instead into websites that do not use APIs as oppose of those which do use APIs on the client-side.
The exception is a static website with don&amp;rsquo;t have moving data i.</description>
      <content>&lt;p&gt;Here&amp;rsquo;s a hot take from me.&lt;/p&gt;
&lt;p&gt;At the higher level, I will put on 2 sides: &lt;em&gt;&amp;ldquo;Static&amp;rdquo;&lt;/em&gt; and &lt;em&gt;&amp;ldquo;Dynamic&amp;rdquo;&lt;/em&gt;, as in
&lt;strong&gt;Render the whole page again&lt;/strong&gt; versus &lt;strong&gt;fetch and re-render HTML elements on
the fly&lt;/strong&gt;, respectively. At the developer&amp;rsquo;s level, we can think and categorize
instead into websites that &lt;strong&gt;do not use APIs&lt;/strong&gt; as oppose of those which &lt;strong&gt;do use
APIs&lt;/strong&gt; &lt;em&gt;on the client-side&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The exception is a static website with don&amp;rsquo;t have moving data i.e. &lt;em&gt;blogs&lt;/em&gt;. They
can be just .html files, so APIs doesn&amp;rsquo;t matter. More suitable example is &lt;strong&gt;a
web application&lt;/strong&gt;, i.e. &lt;em&gt;Facebook&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-no-apis-approach&#34;&gt;The no APIs approach&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;TL;DR: HTML is heavy. You can&amp;rsquo;t make a mobile app.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First of all, &lt;strong&gt;you are making a Facebook with only HTMLs&lt;/strong&gt;. Think, &lt;em&gt;John&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data is in the form of HTML.&lt;/strong&gt; Hence, &lt;strong&gt;you can&amp;rsquo;t create a mobile app&lt;/strong&gt;.
Please don&amp;rsquo;t make apps with a webpage embedded in, &lt;em&gt;for god&amp;rsquo;s sake&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;In the case of Facebook, &lt;strong&gt;you can&amp;rsquo;t see new posts without downloading a whole
new HTML&lt;/strong&gt;. Your server only outputs HTMLs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I challenge you to get the comments for a post without refreshing Facebook,
without APIs.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That means, if you are making an application, you can forget what you learn
about web at school.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;My professor wanted me to use &amp;ldquo;AJAX&amp;rdquo; to make changes in a tabbed &lt;em&gt;Edit&lt;/em&gt; page
so that it &lt;strong&gt;doesn&amp;rsquo;t refresh the page without teaching APIs&lt;/strong&gt;. Can you guess
why?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt=&#34;AJAX without API&#34; src=&#34;http://localhost:1313/images/uploads/jsp.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-apis-approach&#34;&gt;The APIs approach&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;TL;DR: Hot-swap data. Can make mobile app. Can be used as 3rd party service.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data is in the form of JSON/XML (usually).&lt;/strong&gt; Now you can delete HTMLs and
render new ones from JSON with JavaScript. Better yet, use Front-end frameworks.
Even better, you&amp;rsquo;ll &lt;strong&gt;be able to send out immediately the static parts of the
page&lt;/strong&gt; and later on &lt;em&gt;fetch&lt;/em&gt; and render other parts (because you request data
&lt;strong&gt;on-demand&lt;/strong&gt; via APIs).&lt;/p&gt;
&lt;p&gt;Your &lt;em&gt;Facebook&lt;/em&gt; is more lively than ever, all thanks to &lt;em&gt;React&lt;/em&gt;. Now imagine
&lt;em&gt;Java&amp;rsquo;s JSP&lt;/em&gt;. And &lt;em&gt;C#&amp;rsquo;s Razor Pages&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Now that you have APIs, &lt;strong&gt;you can create a mobile app&lt;/strong&gt;. Lewlew?&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>A degree is the only way to acquire knowledge</title>
      <link>http://localhost:1313/posts/a-degree-is-the-only-way-to-acquire-knowledge/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/a-degree-is-the-only-way-to-acquire-knowledge/</guid>
      <description>Today I came across this:
Maybe YouTube isn&amp;rsquo;t the right thing to &amp;ldquo;substitute&amp;rdquo; your degree, and I agreed. However, you are mixing terms.
In the context of learning, the medium are merely a link in the chain. Your knowledge is the only thing that matters. A Software Engineering degree doesn&amp;rsquo;t equal knowing how to actually build a good Uber app from the ground up.
I&amp;rsquo;ve learned countless things that I don&amp;rsquo;t use in my everyday life.</description>
      <content>&lt;p&gt;Today I came across this:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;Youtube comment&#34; src=&#34;http://localhost:1313/images/uploads/youtube-comment.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Maybe YouTube isn&amp;rsquo;t the right thing to &amp;ldquo;substitute&amp;rdquo; your degree, and I agreed.
However, you are mixing terms.&lt;/p&gt;
&lt;p&gt;In the &lt;em&gt;context&lt;/em&gt; of learning, the medium are merely a link in the chain. Your
knowledge is the only thing that matters. &lt;strong&gt;A Software Engineering degree
doesn&amp;rsquo;t equal knowing how to actually build a &lt;em&gt;good&lt;/em&gt; Uber app from the ground
up.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve learned countless things that I don&amp;rsquo;t use in my everyday life. Guess what,
you don&amp;rsquo;t use, you forget.&lt;/p&gt;
&lt;p&gt;And they call someone who actually values their time &lt;em&gt;&amp;ldquo;a dreamer&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you come across a person who knows how to make a full-blown system, and they
learned that from no university, but &lt;strong&gt;multiple&lt;/strong&gt; mediums like Medium (get it?),
&lt;strong&gt;YouTube&lt;/strong&gt;, Udemy, Pluralsight, Skillshare, Codecademy etc., would you call
them out?&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t Medical school. You have to give &lt;strong&gt;context&lt;/strong&gt;. 4 years of Software
Engineering means nothing. It&amp;rsquo;s your &lt;strong&gt;knowledge&lt;/strong&gt;. &lt;em&gt;Thank you for listening.&lt;/em&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The art of self-studying</title>
      <link>http://localhost:1313/posts/the-art-of-self-studying/</link>
      <pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/the-art-of-self-studying/</guid>
      <description>It doesn&amp;rsquo;t have to be messy.
There is a bigger problem here. To all the self-study advice giving people, should you go to university?
There are two problems I want to address here:
Who can be classified as &amp;ldquo;self-studying&amp;rdquo;, What &amp;ldquo;the self-study people&amp;rdquo; do. I indeed have seen many self-study advice giving figures out there, to university students. It is a must to self-study (a whole different topic that I won&amp;rsquo;t touch in this blog).</description>
      <content>&lt;p&gt;It doesn&amp;rsquo;t have to be messy.&lt;/p&gt;
&lt;p&gt;There is a bigger problem here. To all the &lt;em&gt;self-study advice giving&lt;/em&gt; people,
&lt;strong&gt;should you go to university?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two problems I want to address here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Who can be classified as &amp;ldquo;self-studying&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;What &amp;ldquo;the self-study people&amp;rdquo; do.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I indeed have seen many &lt;em&gt;self-study advice giving&lt;/em&gt; figures out there, &lt;strong&gt;to
university students&lt;/strong&gt;. It is &lt;strong&gt;a must&lt;/strong&gt; to self-study (a whole different topic
that I won&amp;rsquo;t touch in this blog). What I don&amp;rsquo;t understand is, given no
information about the advisor&amp;rsquo;s profile, &lt;em&gt;what is the point&lt;/em&gt;? Then when asking
about it, &lt;strong&gt;they said&lt;/strong&gt; that they are having &amp;ldquo;a successful position&amp;rdquo;. That was
some time ago (sadly). Sure, they might be in a good position(?). But,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;mailto:xuanan2001@gmail.com&#34;&gt;Tell me&lt;/a&gt; what &amp;ldquo;foundation&amp;rdquo; universities provide
that makes you a person that the society needs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;How do I know that they &lt;strong&gt;surely&lt;/strong&gt; went to an university? Because they put
&amp;ldquo;Studied X at University of Y&amp;rdquo; on their profile.&lt;/p&gt;
&lt;p&gt;What you want, in the end, is the knowledge to be able to provide values (to
make money, to live). Who can teach you that? &lt;strong&gt;A teacher&lt;/strong&gt;, of course. Teachers
teach at schools. Here&amp;rsquo;s the problem: Suppose you are a student who wants to
make &lt;em&gt;that app you book foods and rides&lt;/em&gt; (Software Engineer), you go to school
to learn programming. &lt;strong&gt;Is the curriculum outdated? Have you tried to answer
that question?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I can say with confidence that &lt;strong&gt;one&lt;/strong&gt; single year in Software age is not 365
days, &lt;strong&gt;it&amp;rsquo;s a matter of getting a job.&lt;/strong&gt; Ask the teachers. &lt;strong&gt;They don&amp;rsquo;t work in
the industry.&lt;/strong&gt; Proves: Ask them to get in an interview with employers. Then
they would learn that new knowledge to work that job, &lt;strong&gt;except you learn the old
knowledge from them.&lt;/strong&gt; What&amp;rsquo;s funny, they usually don&amp;rsquo;t make that old knowledge
go away. &lt;em&gt;They teach them&lt;/em&gt;. 10 years ago, someone &lt;strong&gt;was&lt;/strong&gt; hiring them. Look
again, it&amp;rsquo;s 2021, do they have the knowledge to teach someone to work in 2022?&lt;/p&gt;
&lt;h2 id=&#34;who-can-be-classified-as-self-studying&#34;&gt;Who can be classified as &amp;ldquo;self-studying&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;First of all, how do you find the time to &lt;em&gt;self-study&lt;/em&gt; in university life? You
must be a prodigy.&lt;/p&gt;
&lt;p&gt;Self-studying, in &lt;em&gt;the university sense&lt;/em&gt;, is learning &lt;strong&gt;new things&lt;/strong&gt; outside of
your learning schedule &lt;strong&gt;(including homework)&lt;/strong&gt;. You can&amp;rsquo;t. (if you learn at
schools properly)&lt;/p&gt;
&lt;p&gt;Do you see a paradox here? You go to school to learn, and you need to
self-study. Why do I need to self-study &lt;em&gt;when I&amp;rsquo;m literally studying myself&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Self-studying, in &lt;em&gt;my&lt;/em&gt; definition, is studying. You do that everyday. Why? What
would you do when your professor says something that needs to be more clear? You
ask them, and you are doing yourself a favor by self-studying, which if you
don&amp;rsquo;t, you&amp;rsquo;re just learning from textbook.&lt;/p&gt;
&lt;p&gt;So you &lt;strong&gt;are&lt;/strong&gt; self-studying. Knowledge comes to each person differently
(because different knowledge backgrounds), and you need to learn it your way.
Makes sense?&lt;/p&gt;
&lt;h2 id=&#34;what-the-self-study-people-do&#34;&gt;What “the self-study people” do&lt;/h2&gt;
&lt;h3 id=&#34;being-a-sharp-candidate&#34;&gt;Being a sharp candidate&lt;/h3&gt;
&lt;p&gt;Have you ever question the things &lt;em&gt;the self-study people&lt;/em&gt; learn? They learn &lt;em&gt;new
things&lt;/em&gt;? Not quite. Think about it, do you know how to repair an airplane&amp;rsquo;s
engine? Probably not. &lt;em&gt;It is not a new thing&lt;/em&gt;, but it is for you.&lt;/p&gt;
&lt;p&gt;Most importantly, they learn how to get a job, and &lt;strong&gt;a better job&lt;/strong&gt;, and a $100k
job, and a $200k job. Isn&amp;rsquo;t that what schools teach you? No. By the time you
finish your 4 years of university (that teach technologies at least), it&amp;rsquo;s like
if you are a prisoner seeing an iPhone. &lt;em&gt;The self-study people&lt;/em&gt; learns as if
tomorrow they would apply for a job, instead of &lt;em&gt;an university student&lt;/em&gt;, who
will apply for a &lt;strong&gt;4-years-ago&lt;/strong&gt; job. Do you see the difference that is
not-so-little obvious?&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a reason why medical schools is more prestige and highly-appreciated
than others. It is a fact that science never gets old. Same as Computer Science.
Now then, medical students use science everyday, as well as we technical people
use technology everyday. The old Flu cures still cures Flu. In other hands, if
your Android phone gets old, can you guess whether it will hold its value as
well as the Flu vaccine? Even the medical students still have to figure out the
new machines and scissors they&amp;rsquo;d need to do things better.&lt;/p&gt;
&lt;p&gt;That &lt;strong&gt;is&lt;/strong&gt; the point. &lt;strong&gt;New things do things better.&lt;/strong&gt; Now who do employers
looking for? Someone who gets the job done. Would they employ a &lt;strong&gt;4 years
behind&lt;/strong&gt; employee?&lt;/p&gt;
&lt;h3 id=&#34;the-essentialist&#34;&gt;&amp;ldquo;The Essentialist&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Besides &amp;ldquo;lacking-behind&amp;rdquo; reasons (of being unemployed), the university students
have to spend their time learning things they don&amp;rsquo;t use for their first job &lt;strong&gt;at
all&lt;/strong&gt;. Before you reasoning with me that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You learn foundation for your future jobs, it&amp;rsquo;s a skill that you will use to
raise your salary.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;No.&lt;/strong&gt; Can you still do juggling &lt;em&gt;after a year&lt;/em&gt;, which at the time you didn&amp;rsquo;t
perform before audience&amp;rsquo;s eyes &lt;strong&gt;even once?&lt;/strong&gt; Why do you waste 4 years
practicing, building up that juggling skill, just so to not use it for &lt;strong&gt;one
single year&lt;/strong&gt;, and still expect to do juggling? What were you thinking before
making a decision to spend 4 years doing juggling? &lt;strong&gt;You will die! You don&amp;rsquo;t
have infinite lifetime!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not all things are of no use. But as if it is equally useless for me to learn to
repair an airplane&amp;rsquo;s engine, it is the same for you to learn things just to not
use it. &lt;em&gt;Like humans&lt;/em&gt;, we will forget how to walk on four legs, and spend half
of them grabbing instead. We remember things that are essentials.&lt;/p&gt;
&lt;h2 id=&#34;to-be-an-artful-student&#34;&gt;To be an artful student&lt;/h2&gt;
&lt;p&gt;Don&amp;rsquo;t tell me that you don&amp;rsquo;t have any objective in your life. You sure do. Like
having &lt;em&gt;a sweet, soft bed&lt;/em&gt; to goof off of. Then you would want &lt;em&gt;a laziest way&lt;/em&gt;
to achieve them. But you are not lazy, you are trying to be &lt;em&gt;smart&lt;/em&gt;, just like
when you&amp;rsquo;re trying to get as much money as soon as possible. You will know which
way is the best &lt;strong&gt;by instinct&lt;/strong&gt;. Just as people don&amp;rsquo;t want you to be &lt;em&gt;overly
smart&lt;/em&gt;, doesn&amp;rsquo;t mean it is necessary a bad thing for you.&lt;/p&gt;
&lt;p&gt;An artful student selectively learns what is &lt;strong&gt;essentials&lt;/strong&gt; and &lt;strong&gt;effective&lt;/strong&gt;.
Don&amp;rsquo;t let anyone tell you to learn to repair an airplane&amp;rsquo;s engine. &lt;strong&gt;You&lt;/strong&gt;
choose your knowledge.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>The desire of documenting</title>
      <link>http://localhost:1313/posts/the-desire-of-documenting/</link>
      <pubDate>Thu, 24 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/the-desire-of-documenting/</guid>
      <description>Think, at which point in time do you want to document things?
That&amp;rsquo;s right. You don&amp;rsquo;t until you need to reflect on them.
But what you mean by &amp;ldquo;reflect&amp;rdquo;? Why? I&amp;rsquo;m living!
You&amp;rsquo;d be right. Now, do you know the legend, in which that guy suddenly had a $20 bill in his jacket&amp;rsquo;s pocket? What&amp;rsquo;s the lesson anyway?
Wha..? Reflecting, in my own terms, means to transfer the same energy to others.</description>
      <content>&lt;p&gt;Think, at which point in time do you want to document things?&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s right. &lt;em&gt;You don&amp;rsquo;t&lt;/em&gt; &lt;strong&gt;until&lt;/strong&gt; you need to &lt;em&gt;reflect&lt;/em&gt; on them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But what you mean by &amp;ldquo;reflect&amp;rdquo;? Why? I&amp;rsquo;m living!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You&amp;rsquo;d be right. Now, do you know the legend, in which that guy suddenly had a
$20 bill in his jacket&amp;rsquo;s pocket? What&amp;rsquo;s the lesson anyway?&lt;/p&gt;
&lt;h2 id=&#34;_wha_&#34;&gt;&lt;em&gt;Wha..?&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Reflecting&lt;/em&gt;, in my own terms, means to transfer the same energy to others. In
other words, you must &lt;strong&gt;be able to explain&lt;/strong&gt; that thingy to people.&lt;/p&gt;
&lt;p&gt;Imagine this. You break one&amp;rsquo;s heart. They go,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Why? You may know the answer (&lt;em&gt;just be &lt;strong&gt;sure&lt;/strong&gt; to curb your mouth&lt;/em&gt;). Now a week
later you &lt;em&gt;reflect&lt;/em&gt; on that, except &lt;em&gt;you don&amp;rsquo;t&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Are you bad and &lt;em&gt;rebound&lt;/em&gt;? (please don&amp;rsquo;t). Or did you not &lt;strong&gt;documenting&lt;/strong&gt;?&lt;/p&gt;
&lt;p&gt;Personal story time: &lt;em&gt;That&amp;rsquo;s me&lt;/em&gt; (not the rebound part). Though I did talk to
people, so I &lt;em&gt;was&lt;/em&gt; documenting. By talking about it, I got a second chance to
think about that same thing. And I did &lt;strong&gt;fifteen&lt;/strong&gt;, just to be sure. Now that&amp;rsquo;s
what I call a &lt;em&gt;refreshing&lt;/em&gt; story.&lt;/p&gt;
&lt;h2 id=&#34;_wastes-time_&#34;&gt;&lt;em&gt;&amp;ldquo;Wastes time.&amp;rdquo;&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Look, you better have your reasoning &lt;strong&gt;and&lt;/strong&gt; be responsible. On the flip side is
what they describe &lt;em&gt;a potato&lt;/em&gt;. Do yourself a favor.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;lifehack.gif&#34; src=&#34;http://localhost:1313/images/uploads/lifehack_cpri1e.gif&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;why-university-defy-natural-psychology&#34;&gt;Why university defy natural psychology&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Reflecting&lt;/em&gt;, in my own terms, means to transfer the same energy to others.
[&amp;hellip;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alright, let me give you an example of &amp;ldquo;reflecting&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a &lt;em&gt;tippity tappity&lt;/em&gt; point, something the &lt;em&gt;modern&lt;/em&gt; people called
&lt;strong&gt;&lt;em&gt;&amp;ldquo;antiquated&amp;rdquo;&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Great things charm the whole history, like Mozart and Da Vinci. Then there&amp;rsquo;s
&lt;strong&gt;contemporary education system&lt;/strong&gt; to join the conversation.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;our-meme.jpg&#34; src=&#34;http://localhost:1313/images/uploads/our-meme.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can, &lt;strong&gt;today&lt;/strong&gt;, &lt;a href=&#34;mailto:xuanan2001@gmail.com&#34;&gt;send me&lt;/a&gt; what knowledge you
could extract out of 4 years of university that can make you get in the $500 job
interview. I &lt;strong&gt;will&lt;/strong&gt; make sure to include that &lt;em&gt;right in this blog here&lt;/em&gt; for
proper reference. Mark my word. Make sure that it makes you &lt;strong&gt;totally eligible&lt;/strong&gt;
to work after &lt;strong&gt;4 years&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I am to blame when you people &lt;del&gt;teach me&lt;/del&gt; &lt;strong&gt;put me in&lt;/strong&gt; a &lt;strong&gt;$300/mon&lt;/strong&gt; job and
tell me that I need &lt;strong&gt;2 more years&lt;/strong&gt;, just in case &lt;strong&gt;4 university years&lt;/strong&gt; does
not suffice, to have a position in the industry.&lt;/p&gt;
&lt;p&gt;Now where do I start &lt;em&gt;documenting&lt;/em&gt; this? Betcha knows, I document this &lt;strong&gt;to a
great extent&lt;/strong&gt;. About &lt;em&gt;that school project&lt;/em&gt;, how about asking your grandkid how
they feel about Internet Explorer. Must&amp;rsquo;ve been an &lt;em&gt;exciting&lt;/em&gt; TED talk.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;internet-explorer-meme.png&#34; src=&#34;http://localhost:1313/images/uploads/internet-explorer-meme.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-much&#34;&gt;How much?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Just enough&lt;/em&gt; to get you out of &lt;em&gt;depression&lt;/em&gt;, whatever that means.&lt;/p&gt;
&lt;p&gt;You see, talk all day and you&amp;rsquo;ll hear words flying,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shut up you &lt;strong&gt;f___&lt;/strong&gt; piece of dress-wielding &lt;strong&gt;c___&lt;/strong&gt; head!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In contrast, don&amp;rsquo;t talk and you&amp;rsquo;d be a &lt;strong&gt;well-known&lt;/strong&gt; middle-class person.&lt;/p&gt;
&lt;p&gt;If you want an advice from a 20s, &lt;strong&gt;&lt;em&gt;well&lt;/em&gt;&lt;/strong&gt; you arrive at the right god-damn
section:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Reflect&lt;/em&gt; on what can be classified as &lt;strong&gt;a milestone&lt;/strong&gt; in your conscious
eternity, either to &lt;em&gt;flex&lt;/em&gt; on it &lt;em&gt;or&lt;/em&gt; to be a proud member of The Boomers.&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How?&lt;/h2&gt;
&lt;p&gt;Talk. Or write blogs (oh well.)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;(In the context of Programming, that means to comment once per &lt;strong&gt;snippet&lt;/strong&gt; of
code. You know what, while we&amp;rsquo;re at it, my &amp;ldquo;professor&amp;rdquo; wanted me to document
&lt;strong&gt;get/set&lt;/strong&gt; methods. The more you know.)&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;reflecting&#34;&gt;Reflecting&lt;/h2&gt;
&lt;p&gt;Did you document anything from this blog post?&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
