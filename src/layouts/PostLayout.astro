---
import type { MarkdownContent, MarkdownInstance } from "astro";
import { getAuthor } from "src/authors";
import type { PostFrontmatter, SEO } from "src/types";

import AuthorInfo from "@/components/AuthorInfo";
import Button from "@/components/Button";
import Giscus from "@/components/Giscus";
import PostLastNextNav from "@/components/PostLastNextNav";
import PublicationAndModifiedDate from "@/components/PublicationAndModifiedDate";

import BaseLayout from "./BaseLayout.astro";

export interface Props {
  content: MarkdownContent<PostFrontmatter>;
}

const { content } = Astro.props as Props;

let allPosts = await Astro.glob<MarkdownInstance<PostFrontmatter>>(
  "../posts/*.{md,mdx}"
);
allPosts = allPosts.sort(
  (a, b) =>
    new Date(b.frontmatter.publication_date).valueOf() -
    new Date(a.frontmatter.publication_date).valueOf()
);
const foundAt = allPosts.findIndex((p) => p.frontmatter.slug === content.slug);
let lastPost: MarkdownInstance<PostFrontmatter> | null = null;
let nextPost: MarkdownInstance<PostFrontmatter> | null = null;
if (foundAt !== -1) {
  lastPost = allPosts[foundAt + 1] ?? null;
  nextPost = allPosts[foundAt - 1] ?? null;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const ogImageURL = content.cover_url.startsWith("/")
  ? new URL(content.cover_url, Astro.site)
  : new URL(content.cover_url);
const seo: SEO = {
  title: content.title,
  description: content.excerpt,
  openGraph: {
    title: content.title,
    type: "article",
    description: content.excerpt,
    url: canonicalURL.toString(),
    image: ogImageURL.toString(),
    article: {
      authors: [content.author],
      publishedTime: content.publication_date,
      modifiedTime: content.publication_date,
    },
  },
};

const author = getAuthor(content.author);
---

<BaseLayout seo={seo} activeNav="blog">
  <div class="mx-auto mb-10 w-fit px-4 md:my-20 md:px-0">
    <div class="flex gap-2">
      <Button id="backBtn" variants={{ size: "sm", intent: "outline" }}>
        Go back
      </Button>
      <a href="/blog">
        <Button variants={{ size: "sm", intent: "outline" }}>
          Go to blog archive
        </Button>
      </a>
    </div>

    <div class="h-4"></div>

    <PublicationAndModifiedDate
      publication_date={content.publication_date}
      modified_date={content.modified_date}
    />
    {
      author && (
        <p>
          By <b>{author.username}</b>
        </p>
      )
    }
    <div class="h-10"></div>
    <article
      class="prose dark:prose-invert xl:prose-xl prose-h1:text-3xl md:prose-h1:text-4xl"
    >
      <!-- Prefix with `_` in case the markdown includes "Title" as a section -->
      <h1 id="_title">{content.title}</h1>

      <img src={content.cover_url} alt={content.title} />

      <slot />

      <hr />

      {author && <AuthorInfo author={author} />}

      <PostLastNextNav
        last={lastPost?.frontmatter}
        next={nextPost?.frontmatter}
      />

      <Giscus client:only="react" />
    </article>
  </div>
</BaseLayout>

<script>
  const backBtn = document.getElementById("backBtn");

  backBtn?.addEventListener("click", () => {
    history.back();
  });
</script>
